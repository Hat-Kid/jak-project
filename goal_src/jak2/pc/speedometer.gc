;;-*-Lisp-*-
(in-package goal)

#|@file
A HUD element that displays your velocity while on the jetboard or on a zoomer.
|#

(defconstant BOARD_MAX_SPEED 35.0)
(defconstant BIKE_MAX_SPEED 40.0) ;; some are 35
(define *speedometer-quat* (new 'static 'quaternion :x 0.28 :y -0.6476 :z 0.267 :w 0.6563))

(defun create-icon ((hud hud-speedometer) (slot int) (skel skeleton-group) (quat quaternion))
  (let ((manipy (process-spawn manipy :init manipy-init (new 'static 'vector :w 1.0) #f skel #f 0 :to hud)))
    (the (pointer manipy)
      (when manipy
        (set! (-> (the process-drawable (-> manipy 0)) draw dma-add-func) (the-as (function process-drawable draw-control symbol object none) dma-add-process-drawable-hud))
        (set-vector! (-> (-> manipy 0) root trans) 0.0 0.0 0.0 1.0)
        (set-vector! (-> (-> manipy 0) root scale) (-> hud icons slot scale-x) (-> hud icons slot scale-y) (-> hud icons slot scale-x) 1.0)
        (quaternion-copy! (-> (-> manipy 0) root quat) quat)
        (logior! (-> manipy 0 mask) (process-mask freeze pause))
        (logclear! (-> manipy 0 mask) (process-mask menu progress))
        (send-event (ppointer->process manipy) 'draw #f)
        (set! (-> hud icons slot icon) (the (pointer manipy) manipy))
        manipy
        )
      )
    )
  )

(defun replace-icon ((this hud-speedometer) (idx int) (skel skeleton-group) (quat quaternion))
  (when (-> this icons 0 icon)
    (deactivate (-> this icons 0 icon 0))
    )
  (send-event (ppointer->process (create-icon this idx skel *speedometer-quat*)) 'draw #t)
  (the (pointer manipy) #f)
  )

(defun target-xz-vel ()
  (aif *target*
    (let ((xz-vel (new-stack-vector0))
          (y-vel (vector-dot (-> it control dynam gravity-normal) (-> it control transv))))
      (vector-! xz-vel (-> it control transv) (vector-float*! xz-vel (-> it control dynam gravity-normal) y-vel))
      (/ (vector-length xz-vel) 4096.0)
      )
    )
  )

(defmethod draw hud-speedometer ((this hud-speedometer))
  (set-hud-piece-position! (the hud-sprite (-> this sprites 2))
    (the int (+ 420.0 (* 130.0 (-> this offset))))
    150
    )
  (set-as-offset-from! (the hud-sprite (-> this icons 0 pos)) (the vector4w (-> this sprites 0 pos)) -4 -3) ;; -4 -3
  (format (clear (-> this strings 0 text)) "~D ~S" (-> this values 0 current)
    (case (-> *pc-cheat-state* speedometer-units)
      (((speedometer-units mps))
        "m/s"
        )
      (((speedometer-units kmh))
        "km/h"
        )
      (((speedometer-units mph))
        "mi/h"
        )))
  (set-as-offset-from! (the hud-sprite (-> this strings 0 pos)) (the vector4w (-> this icons 0 pos)) 0 15)
  (when (not (paused?))
    (let ((rot (new-stack-quaternion0)))
      (quaternion-axis-angle! rot 0.0 1.0 0.0 364.0889)
      (quaternion*! (-> this icons 0 icon 0 root quat) rot (-> this icons 0 icon 0 root quat))
      )
    )
  (let* ((vel (target-xz-vel))
         (val (if (focus-test? *target* board)
                  (the int (* 100.0 (/ vel (if (cheat-state-flag? turbo-board)
                                               (* BOARD_MAX_SPEED (-> *pc-cheat-state* turbo-board-speed)) BOARD_MAX_SPEED))))
                  (the int (* 100.0 (/ vel BIKE_MAX_SPEED))))))
    (set! (-> this sprites 0 angle) (* 182.04445 (the float (- 270 (/ (* 90 val) 100)))))
    )
  (set-as-offset-from! (the hud-sprite (-> this sprites)) (the vector4w (-> this sprites 2)) 40 16)
  (set-as-offset-from! (-> this sprites 1) (the vector4w (-> this sprites 2)) 1 16)
  (call-parent-method this)
  (none)
  )

;; (process-spawn-function process
;;   (lambda :behavior process ()
;;     (let ((time (current-time))
;;           (manipy (the manipy #x1e7024)))
;;       (awhen manipy
;;         (while (not (time-elapsed? time (seconds 1)))
;;           (format *stdcon* "rotating manipy x ~f y ~f z ~f w ~f" (-> it root quat x) (-> it root quat y) (-> it root quat z) (-> it root quat w))
;;           ;; (if (= (rem (- (current-time) time) 300) 0)
;;           ;;   (format 0 "time elapsed ~D~%" (/ (- (current-time) time) 300))
;;           ;;   )
;;           (quaternion-rotate-y! (-> it root quat) (-> it root quat) (degrees (* -45.0 (seconds-per-frame))))
;;           ;; (quaternion-rotate-y! (-> it root quat) (-> it root quat) (degrees (* 45.0 (seconds-per-frame))))
;;           ;; (quaternion-rotate-z! (-> it root quat) (-> it root quat) (degrees (* 45.0 (seconds-per-frame))))
;;           (suspend)
;;           )
;;         )
;;       (deactivate self)
;;       )
;;     )
;;   )

(defmethod init-callback hud-speedometer ((this hud-speedometer))
  (set! (-> this gui-id) (add-process *gui-control* this (gui-channel hud-middle-right) (gui-action hidden) (-> this name) 81920.0 0))
  (set! (-> this icons 1 scale-x) 0.007)
  (set! (-> this icons 1 scale-y) -0.014)
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> this sprites 0 scale-x) 12.0)
  (set! (-> this sprites 0 scale-y) 11.2)
  (set! (-> this sprites 0 pos z) #xfffff2)
  (set! (-> this sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x25 :page #x67a)))
  (set! (-> this sprites 1 pos z) #xfffff0)
  (set! (-> this sprites 2 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x12 :page #x67a)))
  (set! (-> this sprites 2 pos z) #xfffffa)
  (set! (-> this icons 0 scale-x) 0.007)
  (set! (-> this icons 0 scale-y) -0.014)
  (set! (-> this icons 0 pos 2) 0)
  (create-icon this 0 (the skeleton-group (art-group-get-by-name *level* "skel-board" (the (pointer uint32) #f))) *speedometer-quat*)
  ;; (quaternion-copy! (-> this icons 0 icon 0 root quat) (new 'static 'quaternion :x 0.28 :y -0.6476 :z 0.267 :w 0.6563))
  ;; (set! (-> this sprites 3 pos z) #xffffff)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 scale) 0.25)
  (none)
  )

(defmethod update-values hud-speedometer ((this hud-speedometer))
  (when (and (-> *target* pilot) (nonzero? (-> *target* pilot)) (focus-test? *target* pilot))
    (let* ((vehicle (handle->process (-> *target* pilot vehicle)))
           (vehicle-type (-> vehicle type))
           (skel (the skeleton-group (art-group-get-by-name *level* (string-format "skel-~S" vehicle-type) (the (pointer uint32) #f))))
           )
      (if (and vehicle (-> this icons 0 icon 0) (not (= (symbol->string (-> this icons 0 icon 0 draw art-group name)) vehicle-type)))
        (replace-icon this 0 skel (new 'static 'quaternion :x 0.0 :y 0.0 :z 0.0 :w 1.0))
        )
      )
    )
  (when (focus-test? *target* board)
    (if (and (-> this icons 0 icon 0) (not (string= (-> this icons 0 icon 0 draw art-group name) "board")))
      (replace-icon this 0 (the skeleton-group (art-group-get-by-name *level* "skel-board" (the (pointer uint32) #f))) *speedometer-quat*)
      )
    )
  (cond
    ((and (pc-cheats? (-> *pc-settings* cheats) speedometer) (focus-test? *target* board pilot))
     (let ((unit-mult (case (-> *pc-cheat-state* speedometer-units)
                        (((speedometer-units mps))
                         1.0
                         )
                        (((speedometer-units kmh))
                         3.6
                         )
                        (((speedometer-units mph))
                         2.237
                         )
             )))
       (set! (-> this values 0 target) (the int (* unit-mult (target-xz-vel))))
       )
     (logclear! (-> this flags) (hud-flags disable))
     (logior! (-> this flags) (hud-flags show))
     )
    (else
      (logior! (-> this flags) (hud-flags disable))
      (logclear! (-> this flags) (hud-flags show))
      (send-event this 'hide)
      )
    )
  (call-parent-method this)
  (none)
  )

(defmethod update-value-callback hud-speedometer ((this hud-speedometer) (arg0 int) (arg1 int))
  (none)
  )
