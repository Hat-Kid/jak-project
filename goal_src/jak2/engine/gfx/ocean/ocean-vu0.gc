;;-*-Lisp-*-
(in-package goal)

;; name: ocean-vu0.gc
;; name in dgo: ocean-vu0
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(define ocean-vu0-block (new 'static 'vu-function :length 64 :qlength 32))

(defun upload-vu0-program ((func vu-function) (wait-ptr pointer))
  "Upload and block until done.
   Generating the DMA is highly optimized."
  (none)
  )

(defun vu-lights<-light-group! ((arg0 vu-lights) (arg1 light-group))
  "Convert a light-group to the VU format lights used by merc."
  (local-vars (v1-0 uint128) (v1-1 uint128) (a2-1 uint128) (t0-1 uint128) (t1-1 uint128))
  (rlet ((vf0 :class vf)
         (vf10 :class vf)
         (vf11 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         (vf8 :class vf)
         (vf9 :class vf)
         )
    (init-vf0-vector)
    (nop!)
    (let ((a3-0 (the-as uint128 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0))))
      (nop!)
      (let ((a2-0 (-> arg1 dir0 direction quad)))
        (nop!)
        (let ((t1-0 (-> arg1 dir1 direction quad)))
          (nop!)
          (.lvf vf4 (&-> arg1 dir0 color quad))
          (.pextlw v1-0 t1-0 a2-0)
          (let ((t0-0 (-> arg1 dir2 direction quad)))
            (.pextuw a2-1 t1-0 a2-0)
            (.lvf vf8 (&-> arg1 dir0 extra quad))
            (.pextlw t1-1 a3-0 t0-0)
            (.lvf vf5 (&-> arg1 dir1 color quad))
            (.pextuw t0-1 a3-0 t0-0)
            )
          )
        )
      )
    (.lvf vf9 (&-> arg1 dir1 extra quad))
    (let ((a3-1 (make-u128 t1-1 v1-0)))
      (.lvf vf6 (&-> arg1 dir2 color quad))
      (.pcpyud v1-1 v1-0 t1-1)
      (.lvf vf10 (&-> arg1 dir2 extra quad))
      (let ((a2-2 (make-u128 t0-1 a2-1)))
        (.lvf vf7 (&-> arg1 ambi color quad))
        (.mul.x.vf vf4 vf4 vf8)
        (.lvf vf11 (&-> arg1 ambi extra quad))
        (.mul.x.vf vf5 vf5 vf9)
        (set! (-> arg0 direction 0 quad) (the-as uint128 a3-1))
        (.mul.x.vf vf6 vf6 vf10)
        (set! (-> arg0 direction 1 quad) v1-1)
        (.mul.x.vf vf7 vf7 vf11)
        (set! (-> arg0 direction 2 quad) (the-as uint128 a2-2))
        )
      )
    (.min.x.vf vf4 vf0 vf0 :mask #b1000)
    (nop!)
    (.min.x.vf vf5 vf0 vf0 :mask #b1000)
    (nop!)
    (.min.x.vf vf6 vf0 vf0 :mask #b1000)
    (nop!)
    (.max.w.vf vf7 vf0 vf0 :mask #b1000)
    (nop!)
    (nop!)
    (.svf (&-> arg0 color 0 quad) vf4)
    (nop!)
    (.svf (&-> arg0 color 1 quad) vf5)
    (nop!)
    (.svf (&-> arg0 color 2 quad) vf6)
    (nop!)
    (.svf (&-> arg0 ambient quad) vf7)
    0
    (none)
    )
  )

(defmethod-mips2c "(method 16 ocean)" 16 ocean) ;; ocean-generate-verts
(defmethod-mips2c "(method 15 ocean)" 15 ocean)
(defmethod-mips2c "(method 14 ocean)" 14 ocean) ;; ocean-interp-waves