;;-*-Lisp-*-
(in-package goal)

;; name: gun-yellow-shot.gc
;; name in dgo: gun-yellow-shot
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(defun someone-fire-yellow ((arg0 process-drawable) (arg1 vector) (arg2 vector))
  (let ((gp-0 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (set! (-> gp-0 ent) (-> arg0 entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity proj-options-8000))
    (set! (-> gp-0 pos quad) (-> arg1 quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle arg0))
    (let* ((v1-7 *game-info*)
           (a0-8 (+ (-> v1-7 attack-id) 1))
           )
      (set! (-> v1-7 attack-id) a0-8)
      (set! (-> gp-0 attack-id) a0-8)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-normalize-copy! (-> gp-0 vel) arg2 819200.0)
    (spawn-projectile gun-yellow-shot gp-0 arg0 *default-dead-pool*)
    )
  )

(deftype gun-yellow-shot (projectile)
  ((hit-actor?     symbol)
   (tail-pos       vector  :inline)
   (hit-pos        vector  :inline)
   (last-hit-time  time-frame)
   ;; (snd-whoosh         sound-id)
   ;; (muzzle-flash-part  sparticle-launcher)
   ;; (main-shot-part     sparticle-launcher)
   ;; (shot-aim-part      sparticle-launcher)
   ;; (shot-ring-part     sparticle-launcher)
   )
  )

(deftype gun-yellow-2-proc-ignore (structure)
  ((hand  handle)
   (time  time-frame)
   )
  :pack-me
  )

(deftype gun-yellow-shot-2 (gun-yellow-shot)
  ((last-collide-time        time-frame)
   (snd-trail                sound-id)
   (hit-yet?                 symbol)
   (actor-deflect?           symbol)
   (max-actor-deflect-count  int32)
   (last-hit-enemy           handle)
   (delay-attack             time-frame)
   (delay-norm               vector                    :inline)
   (enemy-hit-count          int32)
   (ignore-list              gun-yellow-2-proc-ignore  6 :inline)
   (last-attack-time         time-frame)
   )
  (:methods
    (on-impact (_type_ handle) object)
    (handle-impact (_type_ handle) object)
    (is-in-ignore-list? (_type_ handle) symbol)
    (add-to-ignore-list! (_type_ handle) int)
    )
  )

(defmethod draw-laser-sight ((this gun-yellow-shot))
  "TODO - confirm If applicable, draw the laser sight particles"
  (draw-beam (-> *part-id-table* 227) (-> this tail-pos) (-> this starting-dir) #f #t)
  0
  (none)
  )

(defmethod spawn-impact-particles ((this gun-yellow-shot))
  "Spawns associated particles with the projectile if applicable"
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let* ((s4-0 (-> this root trans))
           (a1-0 (-> this tail-pos))
           (s5-1 (vector-! (new 'stack-no-clear 'vector) s4-0 a1-0))
           (f30-0 (vector-length s5-1))
           (gp-0 (new 'stack-no-clear 'vector))
           )
      (let ((v1-4 a1-0))
        (let ((a0-2 s5-1))
          (let ((a2-1 0.8))
            (.mov vf7 a2-1)
            )
          (.lvf vf5 (&-> a0-2 quad))
          )
        (.lvf vf4 (&-> v1-4 quad))
        )
      (.add.x.vf vf6 vf0 vf0 :mask #b1000)
      (.mul.x.vf acc vf5 vf7 :mask #b111)
      (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
      (.svf (&-> gp-0 quad) vf6)
      (let ((f28-0 (-> *part-id-table* 223 init-specs 4 initial-valuef)))
        (set! (-> *part-id-table* 223 init-specs 4 initial-valuef) (fmin f28-0 (vector-length s5-1)))
        (draw-beam (-> *part-id-table* 223) a1-0 s5-1 #f #t)
        (set! (-> *part-id-table* 223 init-specs 4 initial-valuef) f28-0)
        )
      (vector-normalize! s5-1 1.0)
      (launch-particles (-> *part-id-table* 224) gp-0)
      (let ((s3-0 (new 'stack-no-clear 'matrix))
            (f28-1 (* 0.000015258789 f30-0))
            (f30-1 (-> *part-id-table* 226 init-specs 3 initial-valuef))
            )
        (forward-up->inv-matrix s3-0 s5-1 *up-vector*)
        (set! (-> s3-0 trans quad) (-> s4-0 quad))
        (set! (-> *part-id-table* 226 init-specs 3 initial-valuef) (* f28-1 f30-1))
        (launch-particles (-> *part-id-table* 226) s3-0 :origin-is-matrix #t)
        (set! (-> *part-id-table* 226 init-specs 3 initial-valuef) f30-1)
        )
      (let ((f0-6 (vector-dot s5-1 (-> (camera-matrix) vector 2))))
        (when (< 0.0 f0-6)
          (let ((f0-7 (* f0-6 f0-6))
                (f30-2 (-> *part-id-table* 225 init-specs 8 initial-valuef))
                (f28-2 (-> *part-id-table* 225 init-specs 8 random-rangef))
                )
            (set! (-> *part-id-table* 225 init-specs 8 initial-valuef) (* f30-2 f0-7))
            (set! (-> *part-id-table* 225 init-specs 8 random-rangef) (* f28-2 f0-7))
            (launch-particles (-> *part-id-table* 225) gp-0)
            (set! (-> *part-id-table* 225 init-specs 8 initial-valuef) f30-2)
            (set! (-> *part-id-table* 225 init-specs 8 random-rangef) f28-2)
            )
          )
        )
      )
    0
    (none)
    )
  )

(defmethod deal-damage! ((this gun-yellow-shot) (arg0 process) (arg1 event-message-block))
  "Constructs an [[attack-info]] according to the projectile's `options`"
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 this arg0 arg1)
      (set! (-> this hit-actor?) #t)
      #t
      )
    )
  )

(defmethod spawn-shell-particles ((this gun-yellow-shot))
  "TODO - confirm"
  (cond
    ((-> this hit-actor?)
     (let ((s5-0 (get-process *default-dead-pool* part-tracker #x4000)))
       (when s5-0
         (let ((t9-1 (method-of-type part-tracker activate)))
           (t9-1
             (the-as part-tracker s5-0)
             *entity-pool*
             (symbol->string (-> part-tracker symbol))
             (the-as pointer #x70004000)
             )
           )
         (let ((t9-2 run-function-in-process)
               (a0-3 s5-0)
               (a1-2 part-tracker-init)
               (a2-4 (-> *part-group-id-table* 74))
               (a3-1 0)
               (t0-0 #f)
               (t1-0 #f)
               (t2-0 #f)
               (t3-0 *launch-matrix*)
               )
           (set! (-> t3-0 trans quad) (-> this root trans quad))
           ((the-as (function object object object object object object object object none) t9-2)
            a0-3
            a1-2
            a2-4
            a3-1
            t0-0
            t1-0
            t2-0
            t3-0
            )
           )
         (-> s5-0 ppointer)
         )
       )
     )
    (else
      (let ((s5-1 (get-process *default-dead-pool* part-tracker #x4000)))
        (when s5-1
          (let ((t9-4 (method-of-type part-tracker activate)))
            (t9-4
              (the-as part-tracker s5-1)
              *entity-pool*
              (symbol->string (-> part-tracker symbol))
              (the-as pointer #x70004000)
              )
            )
          (let ((t9-5 run-function-in-process)
                (a0-6 s5-1)
                (a1-5 part-tracker-init)
                (a2-9 (-> *part-group-id-table* 73))
                (a3-3 0)
                (t0-1 #f)
                (t1-1 #f)
                (t2-1 #f)
                (t3-1 *launch-matrix*)
                )
            (set! (-> t3-1 trans quad) (-> this root trans quad))
            ((the-as (function object object object object object object object object none) t9-5)
             a0-6
             a1-5
             a2-9
             a3-3
             t0-1
             t1-1
             t2-1
             t3-1
             )
            )
          (-> s5-1 ppointer)
          )
        )
      )
    )
  0
  (none)
  )

;; WARN: Return type mismatch sound-id vs none.
(defmethod play-impact-sound ((this gun-yellow-shot) (arg0 projectile-options))
  (let ((v1-0 arg0))
    (cond
      ((zero? v1-0)
       (sound-play "yellow-shot-fir")
       )
      ((= v1-0 (projectile-options lose-altitude))
       (sound-play "yellow-gun-burn")
       )
      ((= v1-0 (projectile-options proj-options-2))
       (sound-play "yellow-shot-fiz")
       )
      (else
        (sound-play "yellow-shot-std" :id (-> this sound-id) :position (-> this root trans))
        )
      )
    )
  (none)
  )

(defmethod made-impact? ((this gun-yellow-shot))
  "TODO - queries the collision cache, return true/false"
  (let ((v1-0 (-> this root))
        (t1-0 (new 'stack-no-clear 'collide-query))
        )
    (let ((a0-1 t1-0))
      (set! (-> a0-1 radius) (-> v1-0 root-prim prim-core world-sphere w))
      (set! (-> a0-1 collide-with) (-> v1-0 root-prim prim-core collide-with))
      (set! (-> a0-1 ignore-process0) this)
      (set! (-> a0-1 ignore-process1) (ppointer->process (-> this parent)))
      (set! (-> a0-1 ignore-pat) (-> v1-0 pat-ignore-mask))
      (set! (-> a0-1 action-mask) (collide-action solid))
      )
    (when (fill-and-try-snap-to-surface v1-0 (-> v1-0 transv) -10240.0 12697.6 -4096.0 t1-0)
      (if (logtest? (-> this root status) (collide-status touch-actor))
          (set! (-> this hit-actor?) #t)
          )
      #t
      )
    )
  )

(defun gun-yellow-shot-move ((arg0 gun-yellow-shot))
  (projectile-move-fill-line-sphere arg0)
  (let ((s5-0 (-> arg0 root)))
    (let ((s4-0 (new 'stack-no-clear 'vector)))
      (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
      (let ((f0-0 (vector-length s4-0)))
        (when (< 65536.0 f0-0)
          (vector-normalize! s4-0 65536.0)
          (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
          )
        )
      )
    (when (logtest? (-> s5-0 status) (collide-status touch-surface))
      (if (logtest? (-> arg0 root status) (collide-status touch-actor))
          (set! (-> arg0 hit-actor?) #t)
          )
      (let ((v1-14 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg0 tail-pos) (-> s5-0 trans)) 2048.0))
            (a1-5 (-> arg0 hit-pos))
            )
        (set! (-> a1-5 quad) (-> s5-0 trans quad))
        (vector+! a1-5 a1-5 v1-14)
        (move-to-point! (-> arg0 root) a1-5)
        )
      (go (method-of-object arg0 impact))
      )
    )
  0
  (none)
  )

(defmethod init-proj-collision! ((this gun-yellow-shot))
  "Init the [[projectile]]'s [[collide-shape]]"
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction)
          (the-as (function control-info collide-query vector vector collide-status) cshape-reaction-just-move)
          )
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate jak-yellow-shot))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-13 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-13 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set-vector! (-> v1-13 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-15 prim-core collide-with)
            (collide-spec bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list player-list pusher)
            )
      (set-vector! (-> v1-15 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-18 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-18 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-18 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1)
        )
  0
  (none)
  )

(defmethod init-proj-settings! ((this gun-yellow-shot))
  "Init relevant settings for the [[projectile]] such as gravity, speed, timeout, etc"
  (set! (-> this hit-actor?) #f)
  (set! (-> this tail-pos quad) (-> this root trans quad))
  (cpad-set-buzz! (-> *cpad-list* cpads 0) 1 204 (seconds 0.1))
  (set! (-> this attack-mode) 'eco-yellow)
  (set! (-> this max-speed) 819200.0)
  (set! (-> this move) gun-yellow-shot-move)
  (set! (-> this timeout) (seconds 0.5))
  (set! (-> this sound-id) (new-sound-id))
  (set! (-> this damage) (if (logtest? (game-feature gun-upgrade-damage) (-> *game-info* features))
                             4.0
                             2.0
                             )
        )
  0
  (none)
  )

;; -------------------------------------------------------------------------------------------------

(defbehavior gun-fire-yellow-2 target ()
  (let ((s5-0 (-> self gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> self entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
    ;; (logclear! (-> gp-0 options) (projectile-options po14 po15 po16))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    ;; (set! (-> gp-0 target-handle) (the-as handle #f))
    ;; (set! (-> gp-0 target-pos quad) (the-as uint128 0))
    (set! (-> gp-0 ignore-handle) (process->handle (send-event self 'get-vehicle)))
    (let* ((v1-12 *game-info*)
           (a0-10 (+ (-> v1-12 attack-id) 1))
           )
      (set! (-> v1-12 attack-id) a0-10)
      (set! (-> gp-0 attack-id) a0-10)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) (-> s5-0 fire-dir-out) 819200.0)
    (the-as
      (pointer gun-yellow-shot-2)
      (spawn-projectile gun-yellow-shot-2 gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)
      )
    )
  )

(defbehavior target-gun-fire-yellow target ()
  (gun-fire-yellow-2)
  )

(defmethod play-impact-sound ((this gun-yellow-shot-2) (arg0 projectile-options))
  (call-parent-method this arg0)
  )

(define *last-hit-deflect-target-handle* (the-as (pointer process) #f))

(defbehavior gun-yellow-shot-do-deflect gun-yellow-shot-2 ((arg0 gun-yellow-shot-2) (arg1 vector) (arg2 vector) (arg3 vector))
  (local-vars
    (sv-32 vector)
    (sv-112 vector)
    (sv-116 float)
    (sv-120 int)
    (sv-128 symbol)
    (sv-1680 vector)
    (sv-1712 vector)
    (sv-1716 float)
    (sv-1720 float)
    (sv-1724 vector)
    (sv-1744 vector)
    (sv-1748 float)
    (sv-1752 float)
    )
  (vector+! arg1 arg2 (vector-float*! (new-stack-vector0) arg3 (* -2.0 (vector-dot arg2 arg3))))
  (if (< 0.2 (-> arg1 y))
      (set! (-> arg1 y) (fmax 0.2 (-> arg2 y)))
      )
  (let* ((s4-0 arg0)
         (sv-40 (handle->process (-> s4-0 last-hit-enemy)))
         (sv-80 (vector-normalize-copy! (new-stack-vector0) arg1 204800.0))
         (sv-84 (new-stack-vector0))
         (sv-136 (the (pointer process) #f))
         )
    (when (and (time-elapsed? (-> s4-0 last-collide-time) (seconds 0.05)) (rand-vu-percent? 0.75))
      (set! (-> sv-84 quad) (-> s4-0 root trans quad))
      (vector+! sv-84 sv-84 sv-80)
      (set! (-> sv-84 w) 409600.0)
      (set! (-> sv-80 y) 0.0)
      (vector-normalize! sv-80 1.0)
      (set! sv-112 (vector+! (new-stack-vector0) (-> s4-0 root trans) arg1))
      (set! sv-116 409600000000000000000000.0)
      (set! sv-120 -55041728)
      (set! sv-128 (the-as symbol #f))
      (set! sv-136 (the (pointer process) #f))
      (let ((s3-0 (new 'stack-no-clear 'array 'collide-shape 384)))
        (countdown (s2-0 (fill-actor-list-for-box *actor-hash* (the-as bounding-box sv-84) s3-0 384))
          (let* ((s1-0 (-> s3-0 s2-0))
                 (v1-31 (if (type? s1-0 collide-shape)
                            s1-0
                            )
                        )
                 )
            (when v1-31
              (let* ((s0-0 (-> v1-31 process))
                     (s1-1 (if (type? s0-0 process-focusable)
                               s0-0
                               )
                           )
                     )
                (when s1-1
                  (when (and (!= s4-0 s1-1)
                             (!= s1-1 sv-40)
                             (not (focus-test? (the-as process-focusable s1-1) disable dead inactive))
                             (or (logtest? (process-mask enemy civilian) (-> s1-1 mask))
                                 ;; (and (logtest? (process-mask guard) (-> s1-1 mask)) (-> *setting-control* user-current gun-target-guards?))
                                 )
                             )
                    (when (or (not sv-128)
                              (logtest? (process-mask enemy guard) (-> s1-1 mask))
                              (not (is-in-ignore-list? s4-0 (process->handle s1-1)))
                              )
                      (set! sv-1680 (get-trans (the-as process-focusable s1-1) 3))
                      (set! sv-1712 (vector-! (new-stack-vector0) sv-1680 (-> s4-0 root trans)))
                      (set! sv-1716 0.0)
                      (set! (-> sv-1712 y) 0.0)
                      (set! sv-1720 (vector-normalize-ret-len! sv-1712 1.0))
                      (set! sv-1716 (vector-dot sv-1712 sv-80))
                      (when (or (< (the float sv-120) sv-1716) (and (< 0.707 sv-1716) (= sv-136 *last-hit-deflect-target-handle*)))
                        (set! sv-116 sv-1720)
                        (set! sv-120 (the int sv-1716))
                        (set! (-> sv-112 quad) (-> sv-1680 quad))
                        (set! sv-128 (logtest? (process-mask enemy) (-> s1-1 mask)))
                        (set! sv-136 (process->ppointer s1-1))
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      (let* ((s2-1 *target*)
             (s3-1 (if (type? s2-1 process-focusable)
                       s2-1
                       )
                   )
             )
        (when (and s3-1 (< (vector-vector-distance (get-trans s3-1 0) sv-84) (-> sv-84 w)))
          (when (and (!= s4-0 s3-1)
                     (!= s3-1 sv-40)
                     (not (focus-test? s3-1 disable dead inactive))
                     (or (logtest? (process-mask enemy civilian) (-> s3-1 mask))
                         ;; (and (logtest? (process-mask guard) (-> s3-1 mask)) (-> *setting-control* user-current gun-target-guards?))
                         )
                     )
            (when (or (not sv-128)
                      (logtest? (process-mask enemy guard) (-> s3-1 mask))
                      (not (is-in-ignore-list? s4-0 (process->handle s3-1)))
                      )
              (set! sv-1724 (get-trans s3-1 3))
              (set! sv-1744 (vector-! (new-stack-vector0) sv-1724 (-> s4-0 root trans)))
              (set! sv-1748 0.0)
              (set! (-> sv-1744 y) 0.0)
              (set! sv-1752 (vector-normalize-ret-len! sv-1744 1.0))
              (set! sv-1748 (vector-dot sv-1744 sv-80))
              (when (or (< (the float sv-120) sv-1748) (and (< 0.707 sv-1748) (= sv-136 *last-hit-deflect-target-handle*)))
                (set! sv-116 sv-1752)
                (set! sv-120 (the int sv-1748))
                (set! (-> sv-112 quad) (-> sv-1724 quad))
                (set! sv-128 (logtest? (process-mask enemy) (-> s3-1 mask)))
                (set! sv-136 (process->ppointer s3-1))
                )
              )
            )
          )
        )
      (vector-! arg1 sv-112 (-> s4-0 root trans))
      (set! *last-hit-deflect-target-handle* (the (pointer process) sv-136))
      )
    )
  (vector-normalize! arg1 546133.3)
  (cond
    ((time-elapsed? (-> arg0 last-hit-time) (seconds 0.3))
     )
    ((time-elapsed? (-> arg0 last-hit-time) (seconds 0.05))
     )
    )
  ;; (sound-play "yellow2-ricco")
  (set-time! (-> arg0 last-hit-time))
  (set! (-> arg0 hit-yet?) #t)
  (none)
  )

(defun gun-yellow-deflect-reaction ((arg0 control-info) (arg1 collide-query) (arg2 vector) (arg3 vector))
  (cshape-reaction-update-state arg0 arg1 arg3)
  (let ((s3-0 (the-as handle #f)))
    (when (and (nonzero? (-> arg1 best-other-tri collide-ptr))
               (-> arg1 best-other-tri collide-ptr)
               (let ((s1-0 (-> arg1 best-other-tri collide-ptr)))
                 (if (type? s1-0 collide-shape-prim)
                     s1-0
                     )
                 )
               )
      (let* ((s2-1 (-> arg1 best-other-tri collide-ptr))
             (a0-4 (if (type? s2-1 collide-shape-prim)
                       s2-1
                       )
                   )
             (v1-4 a0-4)
             )
        (when v1-4
          (set! s3-0 (process->handle (-> (the-as collide-shape-prim a0-4) cshape process)))
          (when (and (logtest? (collide-spec obstacle pusher) (-> (the-as collide-shape-prim v1-4) prim-core collide-as))
                     (not (logtest? (collide-spec civilian enemy vehicle-sphere vehicle-mesh-probeable)
                                    (-> (the-as collide-shape-prim v1-4) prim-core collide-as)
                                    )
                          )
                     )
            (let ((v1-7 (-> arg0 process)))
              (set! (-> (the-as gun-yellow-shot-2 v1-7) actor-deflect?) #t)
              )
            (set! s3-0 (the-as handle #f))
            )
          )
        )
      )
    (let ((s2-2 (the-as gun-yellow-shot-2 (-> arg0 process))))
      (on-impact s2-2 (the-as handle s3-0))
      (set! (-> s2-2 delay-attack) 0)
      )
    )
  0
  (gun-yellow-shot-do-deflect (the-as gun-yellow-shot-2 (-> arg0 process)) arg2 arg3 (-> arg0 surface-normal))
  (-> arg0 status)
  )

(defmethod deal-damage! ((this gun-yellow-shot-2) (arg0 process) (arg1 event-message-block))
  (if (> (-> this max-actor-deflect-count) 0)
      ((method-of-type projectile deal-damage!) this arg0 arg1)
      )
  )

(defun gun-yellow-shot-2-move ((arg0 gun-yellow-shot-2))
  (with-pp
    (projectile-move-fill-line-sphere arg0)
    (let ((s5-0 (-> arg0 root)))
      (let ((s4-0 (new 'stack-no-clear 'vector)))
        (vector-! s4-0 (-> arg0 tail-pos) (-> s5-0 trans))
        (let ((f0-0 (vector-length s4-0)))
          (when (< 65536.0 f0-0)
            (vector-normalize! s4-0 65536.0)
            (vector+! (-> arg0 tail-pos) (-> s5-0 trans) s4-0)
            )
          )
        )
      (when (not (handle->process (-> arg0 last-hit-enemy)))
        (set! (-> arg0 delay-attack) 0)
        )
      (if (and (> (-> arg0 delay-attack) 0) (time-elapsed? (-> arg0 delay-attack) (seconds 0.1)))
          (logior! (-> s5-0 status) (collide-status touch-actor))
          )
      (when (or (logtest? (-> s5-0 status) (collide-status touch-surface))
                (logtest? (-> s5-0 status) (collide-status touch-actor))
                )
        (let ((s2-0 #f)
              (s3-0 #f)
              (s4-1 (the-as object #f))
              )
          (when (logtest? (-> s5-0 status) (collide-status touch-actor))
            (cond
              ((-> arg0 actor-deflect?)
               (set! (-> arg0 actor-deflect?) #f)
               )
              ((> (-> arg0 max-actor-deflect-count) 0)
               (let ((a0-16 (handle->process (-> arg0 last-hit-enemy))))
                 (when a0-16
                   (set! s2-0 #t)
                   (let ((a1-5 (new 'stack-no-clear 'event-message-block)))
                     (set! (-> a1-5 from) (process->ppointer pp))
                     (set! (-> a1-5 num-params) 0)
                     (set! (-> a1-5 message) 'prevent-bounce?)
                     (set! s4-1 (send-event-function a0-16 a1-5))
                     )
                   )
                 )
               )
              (else
                (set! s4-1 #t)
                )
              )
            )
          (when s2-0
            (when (> (-> arg0 delay-attack) 0)
              )
            (handle-impact arg0 (-> arg0 last-hit-enemy))
            )
          (if (and (> (-> arg0 delay-attack) 0) (and (time-elapsed? (-> arg0 delay-attack) (seconds 0.1)) s2-0 (not s4-1)))
              (set! s3-0 #t)
              )
          (when s3-0
            (let ((a2-1 (new 'stack-no-clear 'vector)))
              (set! (-> a2-1 quad) (-> arg0 root transv quad))
              (gun-yellow-shot-do-deflect arg0 (-> arg0 root transv) a2-1 (-> arg0 delay-norm))
              )
            )
          (set! (-> arg0 hit-actor?) (the-as symbol s4-1))
          )
        (set! (-> arg0 delay-attack) 0)
        (let ((v1-57 (vector-normalize! (vector-! (new 'stack-no-clear 'vector) (-> arg0 tail-pos) (-> s5-0 trans)) 2048.0))
              (a1-10 (-> arg0 hit-pos))
              )
          (set! (-> a1-10 quad) (-> s5-0 trans quad))
          (vector+! a1-10 a1-10 v1-57)
          (move-to-point! (-> arg0 root) a1-10)
          )
        (cond
          ((-> arg0 hit-actor?)
           (go (method-of-object arg0 impact))
           )
          (else
            (set-time! (-> arg0 last-collide-time))
            ;; (launch-particles (-> *part-id-table* 272) (-> arg0 hit-pos))
            ;; (launch-particles (-> *part-id-table* 273) (-> arg0 hit-pos))
            (let ((a0-32 (new 'stack-no-clear 'vector)))
              (set! (-> a0-32 quad) (-> arg0 root transv quad))
              (vector-normalize! a0-32 65536.0)
              )
            (vector+! (-> arg0 tail-pos) (-> arg0 root trans) (-> arg0 root transv))
            )
          )
        )
      )
    (none)
    )
  )

(defmethod init-proj-settings! ((this gun-yellow-shot-2))
  (call-parent-method this)
  (set! (-> this actor-deflect?) #f)
  (set! (-> this last-hit-enemy) (the-as handle #f))
  (set! (-> this damage) 1.5)
  ;; (if (logtest? (game-secrets gun-upgrade-yellow-2) (-> *game-info* secrets))
  ;;     (set! (-> this damage) 2.0)
  ;;     )
  (set! (-> this snd-trail) (new-sound-id))
  (set! (-> this hit-yet?) #f)
  ;; (sound-play "yellow2-trail" :id (-> this snd-trail) :pitch 1)
  (set! (-> this last-collide-time) 0)
  (set! (-> this move) gun-yellow-shot-2-move)
  ;; (set! (-> this snd-whoosh) (new-sound-id))
  (dotimes (v1-9 6)
    (set! (-> this ignore-list v1-9 hand) (the-as handle #f))
    )
  (set! (-> this max-actor-deflect-count) 4)
  (set! (-> this timeout) (seconds 3))
  ;; (when (logtest? (game-secrets gun-upgrade-yellow-2) (-> *game-info* secrets))
  ;;   (set! (-> this max-actor-deflect-count) 7)
  ;;   (set! (-> this timeout) (seconds 5))
  ;;   )

  ;; (set! (-> this muzzle-flash-part) (-> *part-id-table* 274))

  ;; (sound-play "yellow-shot" :pitch 1)

  ;; (let ((s5-1 (new 'stack-no-clear 'light-trail-tracker-spawn-params)))
  ;;   (set! (-> s5-1 tracked-obj) (process->handle this))
  ;;   (set! (-> s5-1 appearance) *yellow-shot-2-trail*)
  ;;   (set! (-> s5-1 max-num-crumbs) (the int (* 0.25 (the float (-> s5-1 appearance max-age)))))
  ;;   (set! (-> s5-1 track-immediately?) #t)
  ;;   (let* ((v1-34 (estimate-light-trail-mem-usage
  ;;                   (the-as uint (-> s5-1 max-num-crumbs))
  ;;                   (the-as uint (= (-> s5-1 appearance lie-mode) 3))
  ;;                   )
  ;;                 )
  ;;          (gp-1 (get-process *default-dead-pool* light-trail-tracker-projectile (+ v1-34 8192) 1))
  ;;          )
  ;;     (when gp-1
  ;;       (let ((t9-9 (method-of-type process activate)))
  ;;         (t9-9 gp-1 *target* "light-trail" (the-as pointer #x70004000))
  ;;         )
  ;;       (run-now-in-process gp-1 light-trail-tracker-init-by-other s5-1)
  ;;       (-> gp-1 ppointer)
  ;;       )
  ;;     )
  ;;   )
  (none)
  )

(defmethod add-to-ignore-list! ((this gun-yellow-shot-2) (arg0 handle))
  (when (and arg0 (not (is-in-ignore-list? this arg0)))
    (dotimes (v1-3 6)
      (when (not (handle->process (-> this ignore-list v1-3 hand)))
        (set! (-> this ignore-list v1-3 hand) arg0)
        (set-time! (-> this ignore-list v1-3 time))
        (return 0)
        )
      )
    (the-as int #f)
    )
  )

(defmethod is-in-ignore-list? ((this gun-yellow-shot-2) (arg0 handle))
  (if (not arg0)
      (return #f)
      )
  (dotimes (v1-2 6)
    (if (and (-> this ignore-list v1-2 hand) (time-elapsed? (-> this ignore-list v1-2 time) (seconds 0.15)))
        (set! (-> this ignore-list v1-2 hand) (the-as handle #f))
        )
    )
  (dotimes (v1-5 6)
    (if (= arg0 (-> this ignore-list v1-5 hand))
        (return #t)
        )
    )
  #f
  )

;; WARN: Return type mismatch int vs object.
(defmethod handle-impact ((this gun-yellow-shot-2) (arg0 handle))
  (when (> (-> this max-actor-deflect-count) 0)
    (let ((s5-0 (handle->process arg0)))
      (when s5-0
        (if (and (logtest? (process-mask guard) (-> s5-0 mask))
                 ;; (not (-> *setting-control* user-current gun-target-guards?))
                 )
            (set! (-> this damage) 0.0)
            )
        (when (time-elapsed? (-> this last-attack-time) (seconds 0.25))
          (let* ((v1-15 *game-info*)
                 (a0-7 (+ (-> v1-15 attack-id) 1))
                 )
            (set! (-> v1-15 attack-id) a0-7)
            (set! (-> this attack-id) a0-7)
            )
          )
        (when (deal-damage! this s5-0 (the-as event-message-block #f))
          (set-time! (-> this last-attack-time))
          (+! (-> this enemy-hit-count) 1)
          (when (and (< 1 (-> this enemy-hit-count)) (< (-> this enemy-hit-count) 4))
            (send-event *target* 'get-pickup (pickup-type ammo-yellow) -1.0)
            (when (>= 0.0 (get-gun-ammo (-> *target* fact)))
              (set! (-> this timeout) 0)
              0
              )
            )
          (let ((v1-28 (-> this notify-handle)))
            (send-event (handle->process v1-28) 'notify 'attack s5-0)
            )
          (if (>= (-> this enemy-hit-count) 1)
              (set! (-> this damage) 1.0)
              )
          (let ((v0-0 (+ (-> this max-actor-deflect-count) -1)))
            (set! (-> this max-actor-deflect-count) v0-0)
            v0-0
            )
          )
        )
      )
    )
  )

(defmethod on-impact ((this gun-yellow-shot-2) (arg0 handle))
  (let ((a1-1 (-> this last-hit-enemy)))
    (set! (-> this last-hit-enemy) arg0)
    (if (and (!= a1-1 arg0) (> (-> this delay-attack) 0))
        (handle-impact this a1-1)
        )
    )
  (set! (-> this delay-attack) 0)
  (add-to-ignore-list! this arg0)
  )

(defmethod handle-proj-hit! ((this gun-yellow-shot-2) (arg0 process) (arg1 event-message-block))
  (cond
    ((-> this hit-actor?)
     (call-parent-method this arg0 arg1)
     )
    (else
      (let ((s4-1 (the-as object (-> arg1 param 0))))
        (when (and (!= arg0 (handle->process (-> this last-hit-enemy)))
                   (!= arg0 (send-event *target* 'get-vehicle))
                   (not (is-in-ignore-list? this (process->handle arg0)))
                   )
          (new 'stack-no-clear 'vector)
          (let ((s3-0 (-> this delay-norm))
                (s1-0 (-> (the-as touching-shapes-entry s4-1) head))
                (s2-0 (new 'stack-no-clear 'vector))
                )
            (get-intersect-point s2-0 s1-0 (-> this root) (the-as touching-shapes-entry s4-1))
            (let ((v1-16
                    (get-touched-prim
                      s1-0
                      ((method-of-type touching-shapes-entry get-touched-shape) (the-as touching-shapes-entry s4-1) (-> this root))
                      (the-as touching-shapes-entry s4-1)
                      )
                    )
                  )
              (when v1-16
                (vector-! s3-0 s2-0 (the-as vector (-> v1-16 prim-core)))
                (vector-normalize! s3-0 1.0)
                (on-impact this (process->handle arg0))
                (set-time! (-> this delay-attack))
                )
              )
            )
          )
        )
      #t
      )
    )
  )

(defstate impact (gun-yellow-shot-2)
  :virtual #t
  :enter (behavior ()
    ;; (sound-stop (-> self snd-trail))
    (let ((enter (-> (find-parent-state) enter)))
      (if enter
          (enter)
          )
      )
    )
  )

(defmethod init-proj-collision! ((this gun-yellow-shot-2))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) gun-yellow-deflect-reaction)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 3))
      (set! (-> s4-0 prim-core collide-as) (collide-spec projectile))
      (set! (-> s4-0 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher)
            )
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 4096.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-12 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-12 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-12 prim-core collide-with)
            (collide-spec backgnd bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher)
            )
      (set! (-> v1-12 prim-core action) (collide-action solid))
      (set-vector! (-> v1-12 local-sphere) 0.0 0.0 0.0 819.2)
      )
    (let ((v1-14 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-14 prim-core collide-as) (collide-spec projectile))
      (set! (-> v1-14 prim-core collide-with)
            (collide-spec bot crate civilian enemy obstacle vehicle-sphere hit-by-others-list pusher)
            )
      (set-vector! (-> v1-14 local-sphere) 0.0 0.0 0.0 4096.0)
      )
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-17 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-17 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-17 prim-core collide-with))
      )
    (set! (-> s5-0 max-iteration-count) (the-as uint 1))
    (set! (-> s5-0 event-self) 'touched)
    (set! (-> this root) s5-0)
    )
  (set! (-> this root pat-ignore-mask)
        (new 'static 'pat-surface :noentity #x1 :nojak #x1 :probe #x1 :noproj #x1 :noendlessfall #x1)
        )
  0
  (none)
  )

(defmethod deactivate ((this gun-yellow-shot-2))
  "Make a process dead, clean it up, remove it from the active pool, and return to dead pool."
  ;; (sound-stop (-> this snd-trail))
  (call-parent-method this)
  (none)
  )

(defmethod spawn-impact-particles ((this gun-yellow-shot-2))
  (call-parent-method this)
  )
