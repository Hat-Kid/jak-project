;;-*-Lisp-*-
(in-package goal)

;; name: sparticle-launcher-h.gc
;; name in dgo: sparticle-launcher-h
;; dgos: GAME

(declare-type sprite-vec-data-3d structure)
(declare-type sparticle-cpuinfo structure)
(declare-type sparticle-system structure)

;; +++sp-field-id
(defenum sp-field-id
  :type uint16
  ;; todo copied from jak 2
  (misc-fields-start 0)
  (spt-texture 1)
  (spt-anim 2)
  (spt-anim-speed 3)
  (spt-birth-func 4)
  (spt-joint/refpoint 5)
  (spt-num 6)
  (spt-sound 7)
  (misc-fields-end 8)

  (sprite-fields-start 9)
  (spt-x 10)
  (spt-y 11)
  (spt-z 12)
  (spt-scale-x 13)
  (spt-rot-x 14)
  (spt-rot-y 15)
  (spt-rot-z 16)
  (spt-scale-y 17)
  (spt-r 18)
  (spt-g 19)
  (spt-b 20)
  (spt-a 21)
  (sprite-fields-end 22)

  (cpu-fields-start 23)
  (spt-omega 24)
  (spt-vel-x 25)
  (spt-vel-y 26)
  (spt-vel-z 27)
  (spt-scalevel-x 28)
  (spt-rotvel-x 29)
  (spt-rotvel-y 30)
  (spt-rotvel-z 31)
  (spt-scalevel-y 32)
  (spt-fade-r 33)
  (spt-fade-g 34)
  (spt-fade-b 35)
  (spt-fade-a 36)
  (spt-accel-x 37)
  (spt-accel-y 38)
  (spt-accel-z 39)
  (spt-dummy 40)
  (spt-quat-x 41)
  (spt-quat-y 42)
  (spt-quat-z 43)
  (spt-quad-w 44)
  (spt-friction 45)
  (spt-timer 46)
  (spt-flags 47)
  (spt-userdata 48)
  (spt-func 49)
  (spt-next-time 50)
  (spt-next-launcher 51)
  (cpu-fields-end 52)

  (launch-fields-start 53)
  (spt-launchrot-x 54)
  (spt-launchrot-y 55)
  (spt-launchrot-z 56)
  (spt-launchrot-w 57)
  (spt-conerot-x 58)
  (spt-conerot-y 59)
  (spt-conerot-z 60)
  (spt-conerot-w 61)
  (spt-rotate-x 62)
  (spt-rotate-y 63)
  (spt-rotate-z 64)

  (spt-conerot-radius 65)
  (spt-mat-scale-x 66)
  (spt-mat-scale-y 67)
  (spt-mat-scale-z 68)
  (launch-fields-end 69)

  (spt-scale 70)
  (spt-scalevel 71)
  (spt-end 72)
  )
;; ---sp-field-id


;; +++sp-flag
(defenum sp-flag
  :type uint16
  ;; todo copied from jak 2
  (int 0) ;; int
  (float 1) ;; float
  (float-int-rand 2) ;; float with int rand
  (copy-from-other 3) ;; copy
  (object 4) ;; label
  (symbol 5) ;; symbol
  (launcher 6) ;; launcher from id
  (float-store 7) ;; float and store result in *sp-temp*
  )
;; ---sp-flag


;; +++sp-group-item-flag
(defenum sp-group-item-flag
  :bitfield #t
  :type uint16
  (sp0)
  (sp1)
  (sp2)
  (sp3)
  (sp4)
  (sp5)
  (sp6)
  (sp7)
  (sp8)
  (sp9)
  (sp10)
  (sp11)
  (sp12)
  (sp13)
  (sp14)
  (sp15)
  )
;; ---sp-group-item-flag


;; +++sp-launch-state-flags
(defenum sp-launch-state-flags
  :bitfield #t
  :type uint16
  )
;; ---sp-launch-state-flags


;; +++sp-group-flag
(defenum sp-group-flag
  :bitfield #t
  :type uint16
  (sp0)
  (sp1)
  (sp2)
  (sp3)
  (sp4)
  (sp5)
  (sp6)
  (sp7)
  (sp8)
  (sp9)
  (sp10)
  (sp11)
  (sp12)
  (sp13)
  (sp14)
  (sp15)
  )
;; ---sp-group-flag


;; DECOMP BEGINS

(deftype sparticle-birthinfo (structure)
  "Used internally by the sparticle code."
  ((sprite        uint32)
   (anim          int32)
   (anim-speed    float)
   (birth-func    basic)
   (joint-ppoint  int32)
   (num-to-birth  float)
   (sound         basic)
   (dataf         float   1 :overlay-at sprite)
   (data          uint32  1 :overlay-at sprite)
   )
  )


(deftype sp-field-init-spec (structure)
  "Part of a particle definition - how to initialize a field of a particle."
  ((field           sp-field-id)
   (flags           sp-flag)
   (initial-valuef  float)
   (random-rangef   float)
   (random-multf    float)
   (initial-value   int32       :overlay-at initial-valuef)
   (random-range    int32       :overlay-at random-rangef)
   (random-mult     int32       :overlay-at random-multf)
   (func            symbol      :overlay-at initial-valuef)
   (tex             texture-id  :overlay-at initial-valuef)
   (pntr            pointer     :overlay-at initial-valuef)
   (object          basic       :overlay-at initial-valuef)
   (sym             symbol      :overlay-at initial-valuef)
   (sound           sound-spec  :overlay-at initial-valuef)
   )
  )


(deftype sparticle-launcher (basic)
  "A definition of a single particle, as a list of init specs."
  ((birthaccum  float)
   (soundaccum  float)
   (init-specs  (inline-array sp-field-init-spec))
   )
  (:methods
    (get-field-spec-by-id (_type_ sp-field-id) sp-field-init-spec)
    (setup-special-textures (_type_ string) none)
    )
  )


(deftype sparticle-group-item (structure)
  "A reference to a single sparticle-launcher (by ID) and some parameters for using it."
  ((launcher    uint32)
   (fade-after  meters)
   (falloff-to  meters)
   (flags       sp-group-item-flag)
   (period      uint16)
   (length      uint16)
   (offset      int16)
   (hour-mask   uint32)
   (binding     uint32)
   )
  )


(deftype sparticle-launch-state (structure)
  "The state associated with a launcher of a given sparticle."
  ((group-item  sparticle-group-item)
   (flags       sp-launch-state-flags)
   (randomize   uint16)
   (center      vector)
   (sprite3d    sprite-vec-data-3d)
   (sprite      sparticle-cpuinfo)
   (offset      uint32)
   (accum       float)
   (spawn-time  uint32)
   (control     sparticle-launch-control)
   (swarm       basic   :overlay-at offset)
   (seed        uint32  :overlay-at accum)
   (time        uint32  :overlay-at spawn-time)
   (spec        basic   :overlay-at sprite)
   (id          uint32  :overlay-at sprite3d)
   )
  )


(deftype sparticle-launch-group (basic)
  "Definition of multiple a particle-group, which is a collection of particle effects."
  ((length           int16)
   (duration         uint16)
   (linger-duration  uint16)
   (flags            sp-group-flag)
   (name             string)
   (launcher         (inline-array sparticle-group-item))
   (rotate-x         degrees)
   (rotate-y         degrees)
   (rotate-z         degrees)
   (scale-x          float)
   (scale-y          float)
   (scale-z          float)
   (bounds           sphere  :inline)
   )
  (:methods
    (create-launch-control (_type_ process) sparticle-launch-control)
    )
  )


(define *launch-matrix* (matrix-identity! (new 'global 'matrix)))

(deftype sparticle-launch-control (inline-array-class)
  "Top-level type containing all the state needed to launch a particle group.
These are typically owned by a process, and allocated on the process heap.
These refer to static particle definitions, and then spawn particles that are tracked by the
particle system itself. This type just holds the launching-related state."
  ((group                sparticle-launch-group)
   (proc                 process-drawable)
   (local-clock          int32)
   (fade                 float)
   (matrix               int8)
   (state-mode           uint8                      3)
   (state-counter        uint32)
   (local-space-binding  particle-local-space-info          :overlay-at fade)
   (last-spawn-frame     int32)
   (last-spawn-time      int32)
   (origin               matrix                     :inline)
   (center               vector                     :inline :overlay-at (-> origin data 12))
   (data                 sparticle-launch-state     :inline :dynamic)
   )
  (:methods
    (sparticle-launch-control-method-14 () none)
    (sparticle-launch-control-method-15 () none)
    (sparticle-launch-control-method-16 () none)
    (sparticle-launch-control-method-17 () none)
    (sparticle-launch-control-method-18 () none)
    (sparticle-launch-control-method-19 () none)
    (sparticle-launch-control-method-20 () none)
    )
  )


(set! (-> sparticle-launch-control heap-base) (the-as uint 48))

(deftype sparticle-subsampler (basic)
  ((spt-num      float)
   (sp-system    sparticle-system)
   (sp-launcher  sparticle-launcher)
   (spawn-mat    matrix  :inline)
   (inited?      basic)
   )
  (:methods
    (new (symbol type sparticle-system sparticle-launcher float) _type_)
    (sparticle-subsampler-method-9 () none)
    (sparticle-subsampler-method-10 () none)
    )
  )


(defmethod new sparticle-subsampler ((allocation symbol) (type-to-make type) (arg0 sparticle-system) (arg1 sparticle-launcher) (arg2 float))
  (let ((s3-0 (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (if (zero? s3-0)
        (go process-drawable-art-error "sparticle-subsampler")
        )
    (set! (-> s3-0 sp-launcher) arg1)
    (set! (-> s3-0 inited?) #f)
    (set! (-> s3-0 sp-system) arg0)
    (set! (-> s3-0 spt-num) arg2)
    (matrix-identity! (-> s3-0 spawn-mat))
    s3-0
    )
  )

(defun compute-rot-in-screenspace ((arg0 vector))
  "Unclear what this does, but I'm not actually sure it makes sense. Unused"
  0.0
  (let ((a0-1 (-> (math-camera-matrix) fvec)))
    0.0
    (let ((v1-0 (new 'stack-no-clear 'vector)))
      (let ((f0-3 (vector-dot a0-1 arg0)))
        (vector-float*! v1-0 a0-1 f0-3)
        )
      (vector-! arg0 arg0 v1-0)
      )
    )
  (let ((a2-1 (matrix-transpose! (new 'stack-no-clear 'matrix) (math-camera-matrix))))
    (vector-matrix*! arg0 arg0 a2-1)
    )
  (the float (sar (shl (the int (atan (-> arg0 y) (* -1.0 (-> arg0 x)))) 48) 48))
  )

(define-extern sp-launch-particles-var (function sparticle-system sparticle-launcher matrix sparticle-launch-state sparticle-launch-control float none))
(define-extern *part-id-table* (array sparticle-launcher))
(define-extern *part-group-id-table* (array sparticle-launch-group))
