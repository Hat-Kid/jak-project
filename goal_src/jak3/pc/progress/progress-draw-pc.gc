;;-*-Lisp-*-
(in-package goal)

#|

  Additional PC port specific file for overriding/expanding the progress menu
  This gives us more freedom to write code how we want.

|#

(defun setup-scissor ((this hud-box) (buf dma-buffer))
  (dma-buffer-add-gs-set buf (scissor-1 (new 'static 'gs-scissor
                                           :scax0 (the int (-> this min x))
                                           :scay0 (the int (-> this min y))
                                           :scax1 (the int (-> this max x))
                                           :scay1 (the int (-> this max y))
                                           )
                                         )
                         )
  )

(defun restore-scissor ((this hud-box) (buf dma-buffer))
  (dma-buffer-add-gs-set buf (scissor-1 (new 'static 'gs-scissor :scax1 #x1ff :scay1 #x19f)))
  )

(defmacro adjust-x-if-needed (x)
  "adjust an x screen coord if ps2 vis is disabled"
  `(if (not (-> *pc-settings* use-vis?)) (adjust-game-x (the float ,x)) ,x))

(defmacro swap-confirm? ()
  "is the confirm button swapped from X?"
  `(and (language? japanese korean)
       (case (scf-get-territory)
         ((GAME_TERRITORY_SCEI GAME_TERRITORY_SCEK) #t)
         (else #f))))

(defmacro set-hud-sprite-attributes! (sprite &key (r 128) &key (g 128) &key (b 128) &key (a 1.0) &key x &key y &key (z #xffffff) &key (w 1) &key tex &key (scale-x 1.0) &key (scale-y 1.0))
  (with-gensyms (col)
    `(begin
      (let ((,col (-> ,sprite color2)))
        (set! (-> ,col 0) ,r)
        (set! (-> ,col 1) ,g)
        (set! (-> ,col 2) ,b)
        (set! (-> ,col 3) (the int (* 128.0 ,a))))
      (set! (-> ,sprite pos z) ,z)
      (set! (-> ,sprite pos w) ,w)
      (set! (-> ,sprite tex) ,tex)
      (set! (-> ,sprite scale-x) ,scale-x)
      (set! (-> ,sprite scale-y) ,scale-y)
      (set-hud-piece-position! ,sprite ,x ,y))))

(defun draw-savegame-box ((arg0 menu-option) (arg1 float) (arg2 float) (arg3 float) (arg4 float))
  (set! (-> arg0 box 0 min x) arg1)
  (set! (-> arg0 box 0 max x) arg2)
  (set! (-> arg0 box 0 min y) arg3)
  (set! (-> arg0 box 0 max y) arg4)
  (with-dma-buffer-add-bucket ((s5-0 (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id hud-draw-hud-alpha))
    (draw-box-prim-only (the-as hud-box (-> arg0 box)) s5-0)))

(defun draw-highlight ((y-pos int) (height int) (alpha float))
  (let ((x-pos (if (= (get-aspect-ratio) 'aspect4x3) 70 79))
        (width (if (= (get-aspect-ratio) 'aspect4x3) 374 355)))
    ;; og:preserve-this
    (#when PC_PORT
      ;; added for better widescreen handling
      (when (not (-> *pc-settings* use-vis?))
        (set! x-pos (the int (adjust-game-x (the float x-pos))))
        (set! width (the int (* (-> *pc-settings* aspect-ratio-reciprocal) width)))))
    (with-dma-buffer-add-bucket ((buffer (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id hud-draw-hud-alpha))
      (draw-sprite2d-xy buffer
                        x-pos
                        y-pos
                        width
                        height
                        (new 'static 'rgba :r #x80 :g #x80 :b #x40 :a (the int (* 64.0 alpha)))
                        #x3fffff))))

(defmethod set-selected-color ((this progress))
  (with-pp
    ;; og:preserve-this high fps fix
    (if (< (seconds 0.027) (logand (the int (* DISPLAY_FPS_RATIO (-> pp clock integral-frame-counter))) 15))
      (set-font-color (font-color font-color-33)
                      (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                      (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                      (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80)
                      (new 'static 'rgba :r #xff :g #xff :b #xff :a #x80))
      (set-font-color (font-color font-color-33)
                      (new 'static 'rgba :r #x60 :g #x60 :b #x60 :a #x80)
                      (new 'static 'rgba :r #x60 :g #x60 :b #x60 :a #x80)
                      (new 'static 'rgba :r #x60 :g #x60 :b #x60 :a #x80)
                      (new 'static 'rgba :r #x60 :g #x60 :b #x60 :a #x80)))
    (none)))

(defmethod draw-highlight-bar ((this progress) (arg0 font-context) (arg1 int) (arg2 int) (arg3 float))
  (let* ((v1-1 (get-scissor-stack-top this))
         (a1-1 (the int (-> v1-1 x)))
         (a3-1 (the int (- (-> v1-1 z) (-> v1-1 x))))
         (f0-6 (- 1.0 (-> this menu-transition))))
    (with-dma-buffer-add-bucket ((s3-0 (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id hud-draw-hud-alpha))
      (when (not (-> *pc-settings* use-vis?))
        (set! a1-1 (the int (adjust-game-x (the float a1-1))))
        (set! a3-1 (the int (* (-> *pc-settings* aspect-ratio-reciprocal) a3-1))))
      (draw-sprite2d-xy s3-0
                        a1-1
                        arg1
                        a3-1
                        arg2
                        (new 'static 'rgba :r #x80 :g #x80 :b #x40 :a (the int (* 64.0 f0-6)))
                        #x3fffff)))
  0)

(defmethod draw-bg-box-outline ((this progress) (arg0 progress-box) (arg1 float))
  (with-dma-buffer-add-bucket ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf))
                               ;; og:preserve-this changed from particles bucket
                               (bucket-id hud-draw-hud-alpha))
    (let* ((box (case (get-aspect-ratio)
                  (('aspect4x3) (-> arg0 aspect4x3))
                  (('aspect16x9) (-> arg0 aspect16x9))))
           (box1 (new 'stack 'hud-box)))
      (mem-copy! (the pointer box1) (the pointer box) (size-of hud-box))
      (set! (-> box1 color w) (the int arg1))
      (#when PC_PORT
        (when (not (-> *pc-settings* use-vis?))
          (set! (-> box1 min x) (the float (the int (adjust-game-x (-> box min x)))))
          (set! (-> box1 max x) (the float (the int (adjust-game-x (-> box max x)))))))
      (draw-box-prim-only box1 s4-0)))
  0)

(defmethod draw-bg-box-alpha-2 ((this progress) (arg0 progress-box) (arg1 float))
  (with-dma-buffer-add-bucket ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id particles))
    (let* ((box (case (get-aspect-ratio)
                  (('aspect4x3) (-> arg0 aspect4x3))
                  (('aspect16x9) (-> arg0 aspect16x9))))
           (box1 (new 'stack 'hud-box)))
      (mem-copy! (the pointer box1) (the pointer box) (size-of hud-box))
      (set! (-> box1 color w) (the int arg1))
      (#when PC_PORT
        (when (not (-> *pc-settings* use-vis?))
          (set! (-> box1 min x) (the float (the int (adjust-game-x (-> box min x)))))
          (set! (-> box1 max x) (the float (the int (adjust-game-x (-> box max x)))))))
      (draw-box-alpha-2 box1 s4-0)))
  0)

(defmethod draw-bg-box-alpha-1 ((this progress) (arg0 progress-box) (arg1 float))
  (with-dma-buffer-add-bucket ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf))
                               ;; og:preserve-this changed from bucket6
                               (bucket-id bucket7))
    (let* ((box (case (get-aspect-ratio)
                  (('aspect4x3) (-> arg0 aspect4x3))
                  (('aspect16x9) (-> arg0 aspect16x9))))
           (box1 (new 'stack 'hud-box)))
      (mem-copy! (the pointer box1) (the pointer box) (size-of hud-box))
      (set! (-> box1 color w) (the int arg1))
      (#when PC_PORT
        (when (not (-> *pc-settings* use-vis?))
          (set! (-> box1 min x) (the float (the int (adjust-game-x (-> box min x)))))
          (set! (-> box1 max x) (the float (the int (adjust-game-x (-> box max x)))))))
      (draw-box-alpha-1 box1 s4-0)))
  0)

(defmethod draw-slider-option ((this progress) (arg0 font-context) (arg1 string) (arg2 float) (arg3 float) (arg4 float) (arg5 float) (arg6 float))
  (local-vars (sv-80 float) (sv-96 float) (sv-112 vector) (sv-128 int) (sv-144 rgba))
  (set! sv-80 arg3)
  (let ((s1-0 arg4)
        (s5-0 arg5))
    (set! sv-96 arg6)
    (set! sv-112 (get-scissor-stack-top this))
    (let ((slider (new 'stack 'hud-sprite))
          (f30-0 (* (- (-> sv-112 z) (-> sv-112 x)) s1-0)))
      (let ((s1-1 (- (- 256 (if sv-96 10 0)) (the int (/ f30-0 2)))))
        (#when PC_PORT
          (when (not (-> *pc-settings* use-vis?))
            (set! s1-1 (the int (adjust-game-x (the float s1-1))))
            (set! f30-0 (the float (the int (adjust-game-x f30-0))))))
        (set! sv-128 (the int (+ (-> sv-112 y) (* (- (-> sv-112 w) (-> sv-112 y)) sv-80))))
        (let ((f28-0 f30-0))
          (let ((f24-0 (-> *video-params* relative-x-scale-reciprical))
                (f26-0 (-> *video-params* relative-x-scale)))
            (with-dma-buffer-add-bucket ((buf (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id hud-draw-hud-alpha))
              (set! (-> slider tid) (the-as texture-id (get-texture hud-sliderbackground progress-minimap)))
              (if (-> slider tid) (set! (-> slider scale-x) (/ (* f30-0 f24-0) (the float (-> (the-as texture (-> slider tid)) w)))))
              (set! (-> slider scale-y) 0.7)
              (let ((v1-28 (-> slider color-ptr)))
                (set! (-> v1-28 0) 128)
                (set! (-> v1-28 1) 128)
                (set! (-> v1-28 2) 128)
                (set! (-> v1-28 3) (the int (* 128.0 arg2))))
              (set-vector! (-> slider pos) s1-1 sv-128 #x3fffff 0)
              (draw slider buf (-> *level* level-default) #t)
              (let ((f24-1 0.2))
                (set! (-> slider tid) (the-as texture-id (get-texture hud-sliderframe progress-minimap)))
                (set! (-> slider scale-x) f24-1)
                (set! (-> slider scale-y) 1.33)
                (if (-> slider tid) (set! f28-0 (- f30-0 (* f24-1 f26-0 (the float (-> (the-as texture (-> slider tid)) w)))))))
              (let* ((v1-39 (the int (* f28-0 s5-0)))
                     (a1-3 (+ s1-1 (the int (* 18.0 f26-0)) v1-39))
                     (a3-2 (the int (- f28-0 (the float v1-39))))
                     (t1-1 (shr (shl (the int (* 128.0 arg2)) 56) 32)))
                (draw-sprite2d-xy buf a1-3 (+ sv-128 7) a3-2 9 (the-as rgba t1-1) #x3fffff))
              (set-vector! (-> slider pos) (+ s1-1 (the int (* f28-0 s5-0))) (+ sv-128 -4) #x3fffff 0)
              (draw slider buf (-> *level* level-default) #t)
              (when sv-96
                (set! sv-144 (-> *font-work* color-table 32 color 0))
                (set! (-> slider tid) (the-as texture-id (get-texture hud-speaker-empty progress-minimap)))
                (set! (-> slider scale-x) 1.0)
                (set! (-> slider scale-y) 1.0)
                (let ((v1-55 (-> slider color-ptr)))
                  (set! (-> v1-55 0) (the-as int (-> sv-144 r)))
                  (set! (-> v1-55 1) (the-as int (-> sv-144 g)))
                  (set! (-> v1-55 2) (the-as int (-> sv-144 b)))
                  (set! (-> v1-55 3) (the int (* 128.0 arg2))))
                (set-vector! (-> slider pos) (+ s1-1 -20) (+ sv-128 -5) #x3fffff 0)
                (draw slider buf (-> *level* level-default) #t)
                (set! (-> slider tid) (the-as texture-id (get-texture hud-speaker-full progress-minimap)))
                (set! (-> slider scale-x) 1.0)
                (set! (-> slider scale-y) 1.0)
                (set-vector! (-> slider pos) (+ (the int f30-0) 8 s1-1) (+ sv-128 -5) #x3fffff 0)
                (draw slider buf (-> *level* level-default) #t)))
            (set-scale! arg0 0.5)
            (set-flags! arg0 (font-flags kerning large))
            (let ((f1-14 (the float s1-1))
                  (f2-3 (+ -20.0 (the float sv-128))))
              (set! (-> arg0 origin x) f1-14)
              (set! (-> arg0 origin y) f2-3))
            (let ((f0-44 (progress-method-45 this arg0 f30-0 (* 32.0 0.5) arg1 0.5 0.75 32)))
              (if (= (-> this option-index) (-> this current-index))
                (draw-highlight-bar this arg0 (the int (+ -2.0 (-> arg0 origin y))) (the int (+ 4.0 f0-44)) arg2))))
          (+! (-> arg0 origin x) f30-0))
        (set-flags! arg0 (font-flags kerning right large))
        (format (clear *temp-string*) "~D%" (the int (* 100.0 s5-0)))
        (print-game-text *temp-string* arg0 #f 44 (bucket-id hud-draw-hud-alpha)))
      (set-flags! arg0 (font-flags kerning large))
      0)))

(defmethod draw-option ((this menu-unlocked-sub-menu-option) (arg0 progress) (arg1 font-context) (arg2 int) (arg3 symbol))
  (let ((s2-0 (memcard-unlocked-secrets? arg0 #t))
        (f30-0 (fmax 0.0 (* 2.0 (- 0.5 (-> arg0 menu-transition))))))
    (adjust-font-origin-y arg0 arg1 (-> this offset-y))
    (set-scale! arg1 0.5)
    (if (= arg2 (-> arg0 option-index)) 33 32)
    (let ((f0-3 (if (logtest? s2-0 (-> this mask))
                  (print-game-text (lookup-text! *common-text* (-> this name) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
                  (print-game-text "?????????" arg1 #f 44 (bucket-id hud-draw-hud-alpha)))))
      (if (= arg2 (-> arg0 option-index))
        (draw-highlight-bar arg0 arg1 (the int (+ 2.0 (-> arg1 origin y))) (the int (+ -1.0 f0-3)) f30-0))))
  (none))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  CUSTOM MENU OPTIONS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun draw-decoration-aspect-ratio-custom ((arg0 menu-option) (arg1 font-context) (arg2 float) (arg3 text-id) (arg5 float))
  (let ((gp-0 70)
        (s5-0 120)
        (sv-48 87)
        (s3-0 375)
        (s2-0 210)
        (sv-64 0))
    (case (get-aspect-ratio)
      (('aspect4x3) (set! gp-0 69) (set! s5-0 129) (set! sv-48 80) (set! s3-0 375) (set! s2-0 210))
      (('aspect16x9) (set! gp-0 79) (set! s5-0 129) (set! sv-48 68) (set! s3-0 356) (set! s2-0 244)))
    (when (not (-> *pc-settings* use-vis?))
      (set! gp-0 (the int (adjust-game-x (the float gp-0))))
      (set! s3-0 (the int (* (-> *pc-settings* aspect-ratio-reciprocal) s3-0))))
    (set-scale! arg1 arg5)
    (set! (-> arg1 origin y) (the float sv-48))
    (set! (-> arg1 height) 50.0)
    (set-color! arg1 (font-color font-color-32))
    (set-flags! arg1 (font-flags kerning middle middle-vert large))
    (print-game-text (lookup-text! *common-text* arg3 #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
    (set-vector! (-> arg0 box 0 color) 64 128 128 (the int (* 128.0 arg2)))
    (draw-savegame-box arg0 (the float gp-0) (the float (+ gp-0 s3-0)) (the float s5-0) (the float s5-0))
    (with-dma-buffer-add-bucket ((s0-1 (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id particles))
      (draw-sprite2d-xy s0-1
                        gp-0
                        s5-0
                        s3-0
                        s2-0
                        (new 'static 'rgba :r #x40 :g #x40 :b #x40 :a (the int (* 64.0 arg2)))
                        #x3fffff))))

(defun draw-highlight-aspect ((x int) (y int) (w int) (h int) (alpha float))
  "draw the highlight for a number in the aspect ratio screen"
  (with-dma-buffer-add-bucket ((buf (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id hud-draw-hud-alpha))
    (when (not (-> *pc-settings* use-vis?))
      (set! x (adjust-game-x (the float x)))
      (set! w (the int (* (-> *pc-settings* aspect-ratio-reciprocal) w))))
    (draw-sprite2d-xy buf x y w h (new 'static 'rgba :r #x80 :g #x80 :b #x40 :a (the int (* 64.0 alpha))) #x3fffff)))

(defun draw-up-down-aspect ((font font-context) (y-up float) (y-down float))
  (protect ((-> font origin x)
        (-> font origin y)
        (-> font scale))
    (let ((start-y (-> font origin y)))
      (set-scale! font 0.5)
      (set! (-> font origin y) (- start-y y-up))
      (print-game-text (string-format "~33L~C" 160) font #f 44 (bucket-id hud-draw-hud-alpha))
      (set! (-> font origin y) (+ start-y y-down))
      (print-game-text (string-format "~33L~C" 162) font #f 44 (bucket-id hud-draw-hud-alpha))))
  0)

(defmethod draw-option ((obj menu-aspect-ratio-custom-option) (arg0 progress) (arg1 font-context) (arg2 int) (arg3 symbol))
  (let* ((alpha (* 2.0 (- 0.5 (-> arg0 menu-transition))))
         (middle-pad 15.0)
         (middle-pad-uncorrected middle-pad)
         (numbers-y 206.0)
         (numbers-text-y (- numbers-y 44.0))
         (hilite-width 36)
         (hilite-height 16)
         (hilite-y-ofs 6)
         (hilite-height-total (+ hilite-height (* 2 hilite-y-ofs)))
         (font-w 100)
         (font-w-corrected (if (not (-> *pc-settings* use-vis?)) (the int (* (-> *pc-settings* aspect-ratio-reciprocal) font-w)) font-w)))
    (fmax! alpha 0.0)
    (set! (-> arg1 alpha) alpha)
    (set-flags! arg1 (font-flags kerning middle large))
    (set-scale! arg1 0.65)
    (set-color! arg1 (font-color font-color-32))
    (set! (-> arg1 origin y) 80.0)
    (if (not (-> *pc-settings* use-vis?)) (*! middle-pad (-> *pc-settings* aspect-ratio-reciprocal)))
    (protect ((-> arg1 origin x)
          (-> arg1 width))
      (set-scale! arg1 0.6)
      (set-width! arg1 50)
      (set! (-> arg1 origin y) numbers-y)
      (set! (-> arg1 origin x) (- 256.0 25))
      (print-game-text "x" arg1 #f 44 (bucket-id hud-draw-hud-alpha))
      (set-width! arg1 font-w-corrected)
      (set-scale! arg1 0.6)
      (set! (-> arg1 origin y) numbers-y)
      (set! (-> arg1 origin x) (- 256.0 middle-pad font-w-corrected))
      (cond
        ((= 0 (-> *progress-state-pc* aspect-ratio-ratio-index))
         (draw-highlight-aspect (- (the int (+ (- 256.0 middle-pad-uncorrected font-w) (/ font-w 2))) (/ hilite-width 2))
                                (- (the int (-> arg1 origin y)) hilite-y-ofs)
                                hilite-width
                                hilite-height-total
                                alpha)
         (set-color! arg1 (font-color font-color-33))
         (draw-up-down-aspect arg1 21.0 25.0))
        (else (set-color! arg1 (font-color font-color-32))))
      (print-game-text (string-format "~D" (-> *pc-settings* aspect-custom-x)) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
      (set-scale! arg1 0.55)
      (set-color! arg1 (font-color font-color-32))
      (set! (-> arg1 origin y) numbers-text-y)
      (print-game-text (lookup-text! *common-text* (text-id progress-aspect-ratio-custom-width) #f)
                       arg1
                       #f
                       44
                       (bucket-id hud-draw-hud-alpha))
      (set-scale! arg1 0.6)
      (set! (-> arg1 origin y) numbers-y)
      (set! (-> arg1 origin x) (+ 256.0 middle-pad))
      (cond
        ((= 1 (-> *progress-state-pc* aspect-ratio-ratio-index))
         (draw-highlight-aspect (- (the int (+ (+ 256.0 middle-pad-uncorrected) (/ font-w 2))) (/ hilite-width 2))
                                (- (the int (-> arg1 origin y)) hilite-y-ofs)
                                hilite-width
                                hilite-height-total
                                alpha)
         (set-color! arg1 (font-color font-color-33))
         (draw-up-down-aspect arg1 21.0 25.0))
        (else (set-color! arg1 (font-color font-color-32))))
      (print-game-text (string-format "~D" (-> *pc-settings* aspect-custom-y)) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
      (set-scale! arg1 0.55)
      (set-color! arg1 (font-color font-color-32))
      (set! (-> arg1 origin y) numbers-text-y)
      (print-game-text (lookup-text! *common-text* (text-id progress-aspect-ratio-custom-height) #f)
                       arg1
                       #f
                       44
                       (bucket-id hud-draw-hud-alpha)))
    (set! (-> arg1 origin y) 289.0)
    (cond
      ((< (/ (the float (-> *pc-settings* aspect-custom-x)) (the float (-> *pc-settings* aspect-custom-y))) (/ 4.0 3.0))
       (set-scale! arg1 0.5)
       (set-color! arg1 (font-color red))
       (when (and (< (/ (the float (-> *pc-settings* aspect-custom-x)) (the float (-> *pc-settings* aspect-custom-y))) (/ 4.0 3.0))
                  (< (mod (-> *display* real-clock frame-counter) (seconds 1.2)) (seconds 1.0)))
         (print-game-text (lookup-text! *common-text* (text-id progress-aspect-ratio-custom-warn) #f)
                          arg1
                          #f
                          44
                          (bucket-id hud-draw-hud-alpha))))
      (else
       (set-scale! arg1 0.55)
       (set-color! arg1 (font-color font-color-32))
       (print-game-text (lookup-text! *common-text*
                                      (if (not (swap-confirm?)) (text-id progress-aspect-ratio-custom-pad-x) (text-id progress-aspect-ratio-custom-pad-circle))
                                      #f)
                        arg1
                        #f
                        44
                        (bucket-id hud-draw-hud-alpha))))
    (when-not-drawn-decoration (draw-decoration-aspect-ratio-custom obj arg1 alpha (text-id progress-aspect-ratio-custom-title) 0.55)))
  0
  (none))

(defmethod draw-option ((obj menu-frame-rate-disclaimer-option) (arg0 progress) (arg1 font-context) (arg2 int) (arg3 symbol))
  (set! (-> arg1 alpha) (- 1.0 (-> arg0 menu-transition)))
  (set-color! arg1 (font-color red))
  (set-scale! arg1 0.8)
  (set-flags! arg1 (font-flags kerning middle middle-vert large))
  (set! (-> arg1 origin x) 90.0)
  (set! (-> arg1 origin y) 72.0)
  (set-width! arg1 330)
  (set-height! arg1 85)
  (when (not (-> *pc-settings* use-vis?))
    (set! (-> arg1 origin x) (the float (adjust-game-x (-> arg1 origin x))))
    (*! (-> arg1 width) (-> *pc-settings* aspect-ratio-reciprocal)))
  (when (< (mod (-> *display* real-clock frame-counter) (seconds 1.2)) (seconds 1.0))
    (print-game-text (lookup-text! *common-text* (text-id progress-fps-disclaimer-warning) #f)
                     arg1
                     #f
                     44
                     (bucket-id hud-draw-hud-alpha)))
  (+! (-> arg1 origin y) 80.0)
  (set-scale! arg1 0.45)
  (set-color! arg1 (font-color font-color-32))
  (print-game-text (lookup-text! *common-text* (text-id progress-fps-disclaimer) #f)
                   arg1
                   #f
                   44
                   (bucket-id hud-draw-hud-alpha))
  (+! (-> arg1 origin y) 65.0)
  (set-scale! arg1 0.55)
  (set-height! arg1 95)
  (print-game-text (lookup-text! *common-text* (text-id progress-memcard-continue?) #f)
                   arg1
                   #f
                   44
                   (bucket-id hud-draw-hud-alpha))
  (+! (-> arg1 origin y) 58.0)
  (set-scale! arg1 0.5)
  (set-height! arg1 50)
  (set-color! arg1 (font-color font-color-32))
  (when (time-elapsed? (-> *progress-state-pc* frame-rate-disclaimer-time) (seconds 3))
    (draw-highlight (the int (+ 13.0 (-> arg1 origin y))) 18 (-> arg1 alpha))
    ; (draw-yes-no arg0 arg1)
    (draw-yes-no-style-footer arg0 arg1 (text-id progress-yes) (text-id progress-no)))
  (none))

(defmethod draw-option ((this menu-sub-menu-option) (arg0 progress) (arg1 font-context) (arg2 int) (arg3 symbol))
  (let ((f30-0 (fmax 0.0 (* 2.0 (- 0.5 (-> arg0 menu-transition))))))
    (set! (-> arg1 alpha) f30-0)
    (set-scale! arg1 0.85)
    (adjust-font-origin-y arg0 arg1 (-> this offset-y))
    (cond
      ((= (-> arg0 option-index) arg2)
       (draw-highlight-bar arg0 arg1 (the int (+ -6.0 (-> arg1 origin y))) 35 f30-0)
       (let ((a0-4 arg1)) (set! (-> a0-4 color) (font-color font-color-33))))
      (else (let ((a0-5 arg1)) (set! (-> a0-5 color) (font-color font-color-32))))))
  (print-game-text (lookup-text! *common-text* (-> this name) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
  0
  (none))

(defmethod draw-option ((this menu-exit-game-option) (progress progress) (fnt font-context) (arg2 int) (selected symbol))
  (let ((alpha (* 2.0 (- 0.5 (-> progress menu-transition))))
        (y (the int (+ -1.0 (-> fnt origin y))))
        (height 22))
    (if (< alpha 0.0) (set! alpha 0.0))
    (set! (-> fnt alpha) alpha)
    (set-scale! fnt 0.85)
    ; (set! (-> fnt height) 25.0)
    ; (set! height 28)
    (adjust-font-origin-y progress fnt (-> this offset-y))
    ; (when (not (memcard-unlocked-secrets? #f #f))
    ;   (-! (-> fnt origin y) 45.0)
    ;   (-! y 49)
    ;   )
    ; (when (memcard-unlocked-secrets? #f #f)
    ;   (-! (-> fnt origin y) 35.0)
    ;   (-! y 38)
    ;   )
    (when (nonzero? (-> this name))
      (set-color! fnt (if (= arg2 (-> progress option-index)) (font-color font-color-32) (font-color font-color-33)))
      (cond
        ((= arg2 (-> progress option-index))
         (set-color! fnt (font-color font-color-33))
         (draw-highlight-bar progress fnt (the int (+ -6.0 (-> fnt origin y))) 35 alpha))
        (else (set-color! fnt (font-color font-color-32))))
      (if selected (set-color! fnt (font-color font-color-34)))
      (print-game-text (lookup-text! *common-text* (-> this name) #f) fnt #f 44 (bucket-id hud-draw-hud-alpha))
      (let ((choice (&-> progress yes-no-choice))
            (str (the string #f)))
        (set! str
              (cond
                (selected
                 (set-color! fnt (font-color font-color-34))
                 (when (memcard-unlocked-secrets? #f #f)
                   (draw-highlight-bar progress fnt (the int (+ 29.0 (-> fnt origin y))) 24 alpha)
                   (+! (-> fnt origin y) 29.0)
                   (set-scale! fnt 0.55))
                 (when (not (memcard-unlocked-secrets? #f #f))
                   (draw-highlight-bar progress fnt (the int (+ 23.0 (-> fnt origin y))) 23 alpha)
                   (+! (-> fnt origin y) 23.0)
                   (set-scale! fnt 0.60))
                 (cond
                   ((-> choice 0)
                    (format (clear *temp-string*)
                            "~33L~S~44L ~S"
                            (lookup-text! *common-text* (text-id progress-yes) #f)
                            (lookup-text! *common-text* (text-id progress-no) #f))
                    (set! str *temp-string*))
                   (else
                    (format (clear *temp-string*)
                            "~44L~S ~33L~S~1L"
                            (lookup-text! *common-text* (text-id progress-yes) #f)
                            (lookup-text! *common-text* (text-id progress-no) #f))
                    (set! str *temp-string*)))
                 str)
                (else (clear *temp-string*))))
        (print-game-text str fnt #f 44 (bucket-id hud-draw-hud-alpha)))))
  (none))

(defun draw-decoration-resolution ((arg0 menu-option) (arg1 font-context) (arg2 float) (arg3 text-id) (arg5 float))
  (let ((gp-0 70)
        (s5-0 120)
        (sv-48 87)
        (s3-0 375)
        (s2-0 210)
        (sv-64 0))
    (case (get-aspect-ratio)
      (('aspect4x3) (set! gp-0 70) (set! s5-0 116) (set! sv-48 84) (set! s3-0 375) (set! s2-0 179))
      (('aspect16x9) (set! gp-0 79) (set! s5-0 108) (set! sv-48 58) (set! s3-0 356) (set! s2-0 185) (set! sv-64 20)))
    (#when PC_PORT
      ;; added for better widescreen handling
      (when (not (-> *pc-settings* use-vis?))
        (set! gp-0 (the int (adjust-game-x (the float gp-0))))
        (set! s3-0 (the int (* (-> *pc-settings* aspect-ratio-reciprocal) s3-0)))))
    (set-scale! arg1 arg5)
    (set! (-> arg1 origin y) (the float sv-48))
    (set! (-> arg1 height) 50.0)
    (set-color! arg1 (font-color font-color-32))
    (set-flags! arg1 (font-flags kerning middle large))
    (print-game-text (lookup-text! *common-text* arg3 #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
    (set-vector! (-> arg0 box 0 color) 64 128 128 (the int (* 128.0 arg2)))
    (draw-savegame-box arg0 (the float gp-0) (the float (+ gp-0 s3-0)) (the float s5-0) (the float s5-0))
    (+! (-> arg1 origin y) (the float sv-64))
    (draw-savegame-box arg0 (the float gp-0) (the float (+ gp-0 s3-0)) (the float (+ s5-0 s2-0)) (the float (+ s5-0 s2-0)))
    (with-dma-buffer-add-bucket ((s0-1 (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id particles))
      (draw-sprite2d-xy s0-1
                        gp-0
                        s5-0
                        s3-0
                        s2-0
                        (new 'static 'rgba :r #x40 :g #x40 :b #x40 :a (the int (* 64.0 arg2)))
                        #x3fffff))))

(defun begin-scissor-resolution ((arg0 hud-box))
  (cond
    ((= (get-aspect-ratio) 'aspect16x9)
     (set! (-> arg0 min x) 79.0)
     (set! (-> arg0 min y) 108.0)
     (set! (-> arg0 max x) 434.0)
     (set! (-> arg0 max y) 293.0))
    (else
     (set! (-> arg0 min x) 70.0)
     (set! (-> arg0 min y) 116.0)
     (set! (-> arg0 max x) 444.0)
     (set! (-> arg0 max y) 295.0)))
  (with-dma-buffer-add-bucket ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id hud-draw-hud-alpha))
    (setup-scissor arg0 s4-0))
  0)

(defun end-scissor-resolution ((arg0 hud-box) (arg1 float))
  (with-dma-buffer-add-bucket ((s5-0 (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id hud-draw-hud-alpha))
    (restore-scissor arg0 s5-0))
  0)

(defmethod draw-option ((this menu-resolution-option) (the-progress progress) (font font-context) (arg2 int) (arg3 symbol))
  (let* ((alpha (* 2.0 (- 0.5 (-> the-progress menu-transition))))
         (box (new 'stack 'hud-box))
         (height 22)
         (text-pad 1)
         (text-height (+ height (* text-pad 2))))
    (fmax! alpha 0.0)
    (set! (-> font alpha) alpha)
    (draw-decoration-resolution this
                                font
                                alpha
                                (if (fullscreen?) (text-id progress-game-res-decoration) (text-id progress-window-size-decoration))
                                0.65)
    (begin-scissor-resolution box)
    (set-flags! font (font-flags kerning large middle))
    (cond
      ((< (-> this selected-index) 0)
       ;; not sure.
       )
      ((-> this valid?)
       (set-scale! font 0.6)
       (set-color! font (font-color font-color-33))
       (set! (-> font origin x) (+ (-> box min x) 16))
       (set! (-> font width) (- (-> box max x) (-> box min x) (* 16 2)))
       (set-height! font 60)
       ;; draw the highlight first
       (draw-highlight 193 (- height 1) alpha)
       ;; now scroll and offset the list
       (if (> (fabs (- (-> this scroll-index) (the float (-> this selected-index)))) 2.0)
         (set! (-> this scroll-index) (the float (-> this selected-index)))
         (seek-ease! (-> this scroll-index)
                     (the float (-> this selected-index))
                     (* 0.15 (-> PP clock time-adjust-ratio))
                     0.3
                     (* 0.0015 (-> PP clock time-adjust-ratio))))
       (set! (-> font origin y) (- 194.0 (* (-> this scroll-index) text-height) (- text-pad)))
       ;; now draw the list!
       (let ((valid-index 0))
         (dotimes (i (-> this num-resolutions))
           ;; count "valid" resolutions
           (let ((this-w 0)
                 (this-h 0)
                 (this-aspect 0.0))
             (pc-get-resolution i (= (pc-get-display-mode) 'windowed) (& this-w) (& this-h))
             (set! this-aspect (/ (the float this-w) (the float this-h)))
             (when (or (= (pc-get-display-mode) 'windowed) (< (fabs (- (-> this win-aspect) this-aspect)) 0.05))
               (if (= valid-index (-> this selected-index))
                 (set-color! font (font-color font-color-33))
                 (set-color! font (font-color font-color-44)))
               (print-game-text (string-format "~D x ~D" this-w this-h) font #f 44 (bucket-id hud-draw-hud-alpha))
               (+! (-> font origin y) text-height)
               (1+! valid-index))))
         (when (fullscreen?)
           ;; draw extra hardcoded cases
           (if (= valid-index (-> this selected-index))
             (set-color! font (font-color font-color-33))
             (set-color! font (font-color font-color-44)))
           (print-game-text (string-format "~D x ~D" 512 416) font #f 44 (bucket-id hud-draw-hud-alpha))
           (+! (-> font origin y) text-height)
           (1+! valid-index)
           (if (= valid-index (-> this selected-index))
             (set-color! font (font-color font-color-33))
             (set-color! font (font-color font-color-44)))
           (print-game-text (string-format "~D x ~D" 512 208) font #f 44 (bucket-id hud-draw-hud-alpha))
           (+! (-> font origin y) text-height)
           (1+! valid-index))))
      (else
       ;; wtf?? just print an ominous warning.
       (set-scale! font 0.6)
       (set-color! font (font-color red))
       (set! (-> font origin x) (+ (-> box min x) 16))
       (set! (-> font origin y) (+ (-> box min y) 120))
       (set! (-> font width) (- (-> box max x) (-> box min x) (* 16 2)))
       (set-height! font 60)
       (print-game-text (lookup-text! *common-text* (text-id progress-error-no-resolutions) #f)
                        font
                        #f
                        44
                        (bucket-id hud-draw-hud-alpha))))
    (end-scissor-resolution box 1.0))
  0
  (none))

; (defun draw-highlight-music-player ((x int) (y int) (w int) (h int) (alpha float))
;   "draw the highlight for a number in the music player screen"
;   (with-dma-buffer-add-bucket ((buf (-> *display* frames (-> *display* on-screen) global-buf))
;                                (bucket-id hud-draw-hud-alpha)
;                                )
;     (draw-sprite2d-xy buf x y w h (new 'static 'rgba :r #x80 :g #x80 :b #x40 :a (the int (* 64.0 alpha))) #x3fffff)
;     )
;   )

; (defun begin-scissor-music-player ((box hud-box))
;   (cond
;     ((= (get-aspect-ratio) 'aspect16x9)
;      (set! (-> box min x) 19.0)
;      (set! (-> box min y) 129.0)
;      (set! (-> box max x) 274.0)
;      (set! (-> box max y) 304.0)
;      )
;     (else
;       (set! (-> box min x) 70.0)
;       (set! (-> box min y) 129.0)
;       (set! (-> box max x) 268.0)
;       (set! (-> box max y) 270.0)
;       )
;     )
;   (#when PC_PORT
;     (set! (-> box min x) (the float (the int (adjust-game-x (-> box min x)))))
;     (set! (-> box max x) (the float (the int (adjust-game-x (-> box max x)))))
;     )
;   (with-dma-buffer-add-bucket ((buf (-> *display* frames (-> *display* on-screen) global-buf))
;                                (bucket-id hud-draw-hud-alpha)
;                                )
;     (setup-scissor box buf)
;     )
;   0
;   )

; (defun end-scissor-music-player ((box hud-box))
;   (with-dma-buffer-add-bucket ((buf (-> *display* frames (-> *display* on-screen) global-buf))
;                                (bucket-id hud-draw-hud-alpha)
;                                )
;     (restore-scissor box buf)
;     )
;   0
;   )

; (defun draw-decoration-music-player ((arg0 menu-option) (arg1 font-context) (arg2 float) (arg3 text-id) (arg5 float) (box hud-box))
;   (let ((list-x (the int (-> box min x)))
;         (list-y (the int (-> box min y)))
;         (title-x 70)
;         (title-y 80)
;         (list-w (the int (- (-> box max x) (-> box min x))))
;         (list-h (the int (- (-> box max y) (-> box min y))))
;         (full-w 375)
;         (full-h 199)
;         )
;     (case (get-aspect-ratio)
;       (('aspect16x9)
;         (set! title-y 69)
;         (set! full-w 355)
;         (set! full-h 233)
;         (*! arg5 1.25)
;         )
;       )
;     (when (not (-> *pc-settings* use-vis?))
;       (set! title-x (the int (adjust-game-x (the float title-x))))
;       (set! full-w (the int (* (-> *pc-settings* aspect-ratio-reciprocal) full-w)))
;       )
;     (set-scale! arg1 arg5)
;     (set-origin! arg1 title-x title-y)
;     (set! (-> arg1 width) 375.0)
;     (set! (-> arg1 height) 48.0)
;     (when (not (-> *pc-settings* use-vis?))
;       (*! (-> arg1 width) (-> *pc-settings* aspect-ratio-reciprocal))
;       )
;     (set-color! arg1 (font-color font-color-33))
;     (set-flags! arg1 (font-flags kerning middle middle-vert large))
;     (print-game-text (lookup-text! *common-text* arg3 #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;     (set-vector! (-> arg0 box 0 color) 64 128 128 (the int (* 128.0 arg2)))
;     (draw-savegame-box arg0 (the float list-x) (the float (+ list-x full-w)) (the float list-y) (the float list-y))
;     (draw-savegame-box arg0 (the float list-x) (the float (+ list-x list-w)) (the float (+ list-y list-h)) (the float (+ list-y list-h)))
;     (draw-savegame-box arg0 (the float (+ list-x list-w)) (the float (+ list-x list-w)) (the float list-y) (the float (+ list-y full-h)))
;     (with-dma-buffer-add-bucket ((s0-1 (-> *display* frames (-> *display* on-screen) global-buf))
;                                   (bucket-id particles)
;                                   )
;       (draw-sprite2d-xy
;         s0-1
;         list-x
;         list-y
;         list-w
;         list-h
;         (new 'static 'rgba :r #x40 :g #x40 :b #x40 :a (the int (* 64.0 arg2)))
;         #x3fffff
;         )
;       )
;     )
;   )

; (defun draw-up-down-music-player ((font font-context) (box hud-box))
;   (protect ((-> font origin x) (-> font origin y) (-> font scale) (-> font width) (-> font height))

;   (let ((start-y (-> font origin y)))
;     (set-scale! font 0.5)
;     (set! (-> font width) (- (-> box max x) (-> box min x)))
;     (set! (-> font height) 16.0)
;     (set-flags! font (font-flags kerning large middle))
;     (set! (-> font origin x) (-> box min x))
;     (set! (-> font origin y) (- (-> box min y) (-> font height)))
;     (print-game-text (string-format "~33L~C" 160) font #f 44 (bucket-id hud-draw-hud-alpha))
;     (set! (-> font origin y) (+ 3.0 (-> box max y)))
;     (print-game-text (string-format "~33L~C" 162) font #f 44 (bucket-id hud-draw-hud-alpha))
;     )
;   )
;   0)

; (defmethod draw-option ((obj menu-music-player-option) (arg0 progress) (arg1 font-context) (arg2 int) (arg3 symbol))
;   (let* ((alpha (* 2.0 (- 0.5 (-> arg0 menu-transition))))
;         (y-pad-top 11)
;         (text-height 23)
;         (old-y 0.0)
;         (list-text-y (+ (- (-> obj current-scroll)) y-pad-top))
;         (max-lines 8)
;         (tab-music 6.0)
;         (tab-flava 12.0)
;         (box (new 'stack 'hud-box))
;         (flava-text-list (new 'static 'boxed-array :type text-id
;                                   (text-id progress-music-player-flava-default)
;                                   (text-id progress-music-player-flava-gun)
;                                   (text-id progress-music-player-flava-board)
;                                   (text-id progress-music-player-flava-mech)
;                                   (text-id progress-music-player-flava-darkjak)
;                                   (text-id progress-music-player-flava-pilot)
;                                   )))
;     (fmax! alpha 0.0)
;     (set! (-> arg1 alpha) alpha)
;     (when (not (-> *pc-settings* use-vis?))
;       (*! tab-music (-> *pc-settings* aspect-ratio-reciprocal))
;       (*! tab-flava (-> *pc-settings* aspect-ratio-reciprocal))
;       ;(set! danger-w (the int (* (-> *pc-settings* aspect-ratio-reciprocal) danger-w)))
;       )
;     (set-flags! arg1 (font-flags kerning large))
;     (set-scale! arg1 0.6)
;     (set-color! arg1 (font-color font-color-33))
;     (begin-scissor-music-player box)
;     (+! list-text-y (-> box min y))
;     (set-scale! arg1 0.45)
;     (set! (-> arg1 origin x) (+ (-> box min x) tab-music))
;     ;(format *stdcon* "m: ~D f: ~D scroll: ~f~%" (-> obj music-index) (-> obj flava-index) (-> obj current-scroll))
;     (dotimes (i (-> *music-player-tracks* length))
;       (set! (-> arg1 origin y) (set! old-y list-text-y))
;       (set! (-> arg1 width) (- (-> box max x) (-> box min x)))
;       (cond
;         ((= i (-> obj music-index))
;           (+! list-text-y text-height)
;           (cond
;             ((-> *progress-state-pc* music-player-selected)
;               ;; restore these later
;               (let* ((flava-bits (the-as int (-> *music-player-tracks* i flava)))
;                     (flava-count (count-bits flava-bits))
;                     (flava-text-height (the int (* (/ 0.42 0.45) text-height))))
;               ;; draw highlight first
;               (draw-highlight-music-player  (the int (-> box min x)) (the int (+ -6.0 (-> arg1 origin y)))
;                                             (the int (- (-> box max x) (-> box min x))) (+ text-height (* flava-count flava-text-height))
;                                             alpha)
;               ;; draw text for each flava!
;               (protect ((-> arg1 origin x) (-> arg1 origin y) (-> arg1 scale))
;                 (set-scale! arg1 0.42)
;                 (+! (-> arg1 origin x) tab-flava)
;                 (set! (-> arg1 origin y) list-text-y)
;                 (dotimes (f flava-count)
;                   (if (= f (-> obj flava-index))
;                       (set-color! arg1 (font-color font-color-33))
;                       (set-color! arg1 (font-color font-color-44)))
;                   (let ((flava (bit-on-offset flava-bits f)))
;                     (if (flava-unlocked? flava)
;                         (print-game-text (lookup-text! *common-text* (-> flava-text-list (bit-on-offset flava-bits f)) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;                         (print-game-text (lookup-text! *common-text* (text-id progress-music-player-locked) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha)))
;                     )
;                   (+! (-> arg1 origin y) flava-text-height)
;                   )
;                 )
;               ;; advance list height
;               (+! list-text-y (* flava-count flava-text-height))
;               ;; set color to selected
;               (set-color! arg1 (font-color font-color-34))
;               ))
;             (else
;               (set-color! arg1 (font-color font-color-33))
;               (draw-highlight-music-player  (the int (-> box min x)) (the int (+ -6.0 (-> arg1 origin y)))
;                                             (the int (- (-> box max x) (-> box min x))) text-height
;                                             alpha)
;               ))
;           (when (< (-> arg1 origin y) (+ (-> box min y) y-pad-top))
;               (set! (-> obj current-scroll) (seek-ease  (-> obj current-scroll) (+ (-> obj current-scroll) (- (-> arg1 origin y) (+ (-> box min y) y-pad-top)))
;                                                         (if (-> *progress-state-pc* music-player-selected) 999999.0 (* 0.1 text-height (-> arg0 clock time-adjust-ratio)))
;                                                         (* 0.3 text-height)
;                                                         (* 0.01 text-height (-> arg0 clock time-adjust-ratio)))))
;           (when (> list-text-y (-> box max y))
;               (set! (-> obj current-scroll) (seek-ease  (-> obj current-scroll) (+ (-> obj current-scroll) (- list-text-y (-> box max y)))
;                                                         (if (-> *progress-state-pc* music-player-selected) 999999.0 (* 0.1 text-height (-> arg0 clock time-adjust-ratio)))
;                                                         (* 0.3 text-height)
;                                                         (* 0.01 text-height (-> arg0 clock time-adjust-ratio)))))
;           )
;         (else
;           (+! list-text-y text-height)
;           (set-color! arg1 (font-color font-color-33))
;           )
;         )
;       (if (get-bit (-> *pc-settings* music-unlocked) i)
;           (print-game-text (lookup-text! *common-text* (-> *music-player-tracks* i text) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;           (print-game-text (lookup-text! *common-text* (text-id progress-music-player-locked) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha)))
;       )
;     (if (< (- list-text-y (-> box max y)) 0.0)
;         (+! (-> obj current-scroll) (- list-text-y (-> box max y))))
;     (unless (-> *progress-state-pc* music-player-selected)
;         (fmax! (-> obj max-scroll) (-> obj current-scroll)))
;     (end-scissor-music-player box)
;     ;; draw right panel text
;     (let ((icon-x 0)
;           (icon-y 174)
;           (icon-w (if (= (get-aspect-ratio) 'aspect4x3)
;                       64
;                       48))
;           (icon-h 64)
;           (icon-scale 0.7)
;           (icon-id 0)
;           (danger-pad 8.0)
;           (danger-w 73)
;           (arrow-w 14)
;           (danger-text-list (new 'static 'boxed-array :type text-id
;                                   (text-id progress-music-player-danger-0)
;                                   (text-id progress-music-player-danger-1)
;                                   (text-id progress-music-player-danger-2)
;                                   (text-id progress-music-player-danger-3)
;                                   )))
;         (set-flags! arg1 (font-flags kerning middle large))
;         (case (get-aspect-ratio)
;           (('aspect16x9)
;             (set-origin! arg1 281 160)
;             (set-width! arg1 144)
;             (set! icon-y 190)
;             )
;           (else
;             (set-origin! arg1 278 144)
;             (set-width! arg1 158)
;             )
;           )
;         (when (not (-> *pc-settings* use-vis?))
;           (set! (-> arg1 origin x) (the float (adjust-game-x (-> arg1 origin x))))
;           (*! danger-pad (-> *pc-settings* aspect-ratio-reciprocal))
;           (*! (-> arg1 width) (-> *pc-settings* aspect-ratio-reciprocal))
;           (set! icon-w (the int (* (-> *pc-settings* aspect-ratio-reciprocal) icon-w)))
;           (set! danger-w (the int (* (-> *pc-settings* aspect-ratio-reciprocal) danger-w)))
;           (set! arrow-w (the int (* (-> *pc-settings* aspect-ratio-reciprocal) arrow-w)))
;           )
;         (set-height! arg1 40)
;         (set-scale! arg1 0.42)
;         (set-color! arg1 (font-color font-color-33))
;         (when (-> *progress-state-pc* music-player-track)
;           (print-game-text (lookup-text! *common-text* (text-id progress-music-player-now-playing) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha)))
;         (set-flags! arg1 (font-flags kerning middle middle-vert large))
;         (+! (-> arg1 origin y) 110.0)
;         (set-scale! arg1 0.48)
;         (cond
;           ((-> *progress-state-pc* music-player-track)
;             (set! icon-id (-> *progress-state-pc* music-player-track icon)) ;; use this icon ID
;             (print-game-text (lookup-text! *common-text* (-> *progress-state-pc* music-player-track text) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;             ;; print flava if needed too
;             (when (nonzero? (-> *progress-state-pc* music-player-track flava))
;               (+! (-> arg1 origin y) 36.0)
;               (set-scale! arg1 0.42)
;               (print-game-text (lookup-text! *common-text* (-> flava-text-list (-> *progress-state-pc* music-player-flava)) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;               )
;             )
;           (else
;             (print-game-text (lookup-text! *common-text* (text-id progress-music-player-no-track) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;             )
;           )
;         ;; draw right panel icon
;         (set! icon-x (the int (+ (-> arg1 origin x) (/ (-> arg1 width) 2))))
;         (set! icon-w (the int (* icon-scale icon-w)))
;         (set! icon-h (the int (* icon-scale icon-h)))
;         ;; center icon. the icon is 96x96 but each sprite is 64x64, hence 1.5
;         (-! icon-x (the int (/ (* 1.5 icon-w) 2)))
;         (set-hud-sprite-attributes! (-> obj sprites 0) :tex (lookup-texture-by-id (get-level-icon-id-01 icon-id)) :a alpha :scale-x icon-scale :scale-y icon-scale :x icon-x :y icon-y)
;         (set-hud-sprite-attributes! (-> obj sprites 1) :tex (lookup-texture-by-id (get-level-icon-id-02 icon-id)) :a alpha :scale-x icon-scale :scale-y icon-scale :x (+ icon-x icon-w) :y icon-y)
;         (set-hud-sprite-attributes! (-> obj sprites 2) :tex (lookup-texture-by-id (get-level-icon-id-03 icon-id)) :a alpha :scale-x icon-scale :scale-y icon-scale :x icon-x :y (+ icon-y icon-h))
;         (set-hud-sprite-attributes! (-> obj sprites 3) :tex (lookup-texture-by-id (get-level-icon-id-04 icon-id)) :a alpha :scale-x icon-scale :scale-y icon-scale :x (+ icon-x icon-w) :y (+ icon-y icon-h))
;         ;; danger scroller
;         (set-scale! arg1 0.42)
;         (set! (-> arg1 origin y) (+ 26.0 (-> box max y)))
;         (set! (-> arg1 origin x) (+ danger-pad (-> box min x)))
;         (set-width! arg1 danger-w)
;         (set-flags! arg1 (font-flags kerning large))
;         (print-game-text (lookup-text! *common-text* (text-id progress-music-player-danger) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;         (+! (-> arg1 origin x) (-> arg1 width))
;         (set-flags! arg1 (font-flags kerning large right))
;         (set-width! arg1 arrow-w)
;         (+! (-> arg1 origin x) (-> arg1 width))
;         (set-color! arg1 (progress-selected (seconds 0.5)))
;         (print-game-text (string-format "~33L~C" 163) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;         (set-flags! arg1 (font-flags kerning large middle))
;         (set-width! arg1 (the int (- (-> box max x) (-> box min x) danger-w (* arrow-w 2) (* danger-pad 2))))
;         (set-color! arg1 (font-color font-color-33))
;         (print-game-text (lookup-text! *common-text* (-> danger-text-list (-> obj excitement)) #f) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;         (+! (-> arg1 origin x) (-> arg1 width))
;         (set-flags! arg1 (font-flags kerning large))
;         (set-width! arg1 arrow-w)
;         (set-color! arg1 (progress-selected (seconds 0.5)))
;         (print-game-text (string-format "~33L~C" 161) arg1 #f 44 (bucket-id hud-draw-hud-alpha))
;         (with-dma-buffer-add-bucket ((buf (-> *display* frames (-> *display* on-screen) global-buf))
;                                      (bucket-id hud-draw-hud-alpha)
;                                      )
;           (draw (-> obj sprites 0) buf (-> *level* default-level))
;           (draw (-> obj sprites 1) buf (-> *level* default-level))
;           (draw (-> obj sprites 2) buf (-> *level* default-level))
;           (draw (-> obj sprites 3) buf (-> *level* default-level))
;           )
;         )
;     (when-not-drawn-decoration
;       (draw-up-down-music-player arg1 box)
;       (draw-decoration-music-player obj arg1 alpha (-> obj name) 0.7 box))
;     )
;   0
;   (none))

(#when PC_PORT
  (defun-debug draw-mouse ()
    "draw some extra mouse info"
    (let ((mx (+ (the int (-> *mouse* posx)) 256))
          (my (+ (the int (-> *mouse* posy)) 208)))
      (format *stdcon* "mouse pos: (~D,~D)~%" mx my)
      (with-dma-buffer-add-bucket ((buf (-> *display* frames (-> *display* on-screen) global-buf)) (bucket-id debug-no-zbuf2))
        (draw-sprite2d-xy buf 0 my 512 1 (static-rgba #xff #xff #xff #x40) #x3fffff)
        (draw-sprite2d-xy buf mx 0 1 416 (static-rgba #xff #xff #xff #x40) #x3fffff))))
  (defmacro spawn-draw-mouse-proc ()
    `(process-spawn-function process
      :name "draw-mouse"
      :to
      *display-pool*
      (lambda :behavior process ()
        (loop
          (suspend)
          (draw-mouse))))))
